<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>克鲁斯卡尔的博客</title>
    <link>http://novoland.github.io</link>
    <atom:link href="http://novoland.github.io/rss.xml" rel="self" type="application/rss+xml" />
    <description>一个程序员</description>
    <language>zh-CN</language>
    <pubDate>Mon, 17 Aug 2015 21:16:05 +0800</pubDate>
    <lastBuildDate>Mon, 17 Aug 2015 21:16:05 +0800</lastBuildDate>

    
    <item>
      <title>消息中心开发过程中踩的几个(常识)坑</title>
      <link>http://novoland.github.io/%E5%B7%A5%E4%BD%9C/2015/08/17/%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E7%9A%84%E5%87%A0%E4%B8%AA(%E5%B8%B8%E8%AF%86)%E5%9D%91.html</link>
      <pubDate>17 Aug 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E5%B7%A5%E4%BD%9C/2015/08/17/消息中心开发过程中踩的几个(常识)坑</guid>
      <description>&lt;div style=&quot;color: #2c3f51; line-height: 1.6;&quot;&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;

&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;碰到的坑主要在数据库并发访问的场景下踩的，原因也比较简单，属于常识坑，这里记录一下，吃一堑长一智。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;简单介绍下业务场景，消息中心负责向用户发消息（站内信），比如谁回复了你，谁赞了你，帖子被删被加精，社区又有新活动，上层模块如影评、社区调用消息中心公布的 thrift RPC 接口向用户发消息。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;消息分两层：聚合消息（session）和子消息（message），二者是父子关系，message 按照不同的规则合并到 session，比如一个用户收到的帖子回复消息，按各自所属帖子分别聚合到不同 session，所有系统通知聚合成一个 session 等等。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Session和message均有两个文本字段：title和content，为了统一管理各种消息的格式，消息中心预先为每种类型配置了各自的velocity模板，业务方调用时传递参数，消息中心负责模板渲染，生成最终的文本。为了避免MySQL表过大，title和content是保存在Tair中的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;所以当收到一个发布消息的请求时，处理步骤如下：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;找到message对应的session，如果不存在则创建一个；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;修改session的发送者、未读消息数、消息总数等字段，渲染得到其title、content，更新之；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;渲染得到message的title、content，插入之。&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;1. if (not exist) INSERT else UPDATE&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;第一步的实现一开始是这样的：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;session = findSession(msg);
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;if&lt;/span&gt;(session == &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;null&lt;/span&gt;){
    session = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;new&lt;/span&gt; Session();
    &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// 更新session字段&lt;/span&gt;
    add(session);
}&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;else&lt;/span&gt;{
    &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// 更新session字段&lt;/span&gt;
    update(session);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这样的实现有两个问题：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;add(session)时可能已经有其他事务insert成功了，此时再add会失败；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;高并发时，insert同一条数据比较容易产生死锁，这个问题足够再写篇笔记了，不赘述。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;对于问题1，数据库并不会出现脏数据，只是会在代码层面抛出异常，导致业务方发布消息失败。通常发消息的动作会是一个异步调用，调用方通常可以接受等待，但不能忍受异常失败，更不愿意捕获异常进行重试，因为相对的发消息只是一个支线流程，复杂度不宜太高。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;MySQL 提供了对标准insert语句的扩展 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT INTO ... ON DUPLICATE KEY UPDATE ...&lt;/code&gt;，如果 insert 触发了索引重复异常，则转为执行 update 动作，非常适合这里 “如果不存在则insert，存在则update” 的场景。重申，这是一个API的设计问题。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;对于问题2，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ON DUPLICATE KEY UPDATE&lt;/code&gt;依然无法避免死锁（见&lt;a href=&quot;http://bugs.mysql.com/bug.php?id=52020&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;MySQL bug 52020&lt;/a&gt;，死锁现场见&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fgist.github.com%2Fnovoland%2Ff14df279b0edf34d061f&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;该条gist&lt;/a&gt;），但概率会低一些（无责任嘴炮中…）&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;经验教训：&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT INTO ... ON DUPLICATE KEY UPDATE ...&lt;/code&gt; 代替代码中 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;if null INSERT else UPDATE&lt;/code&gt; 的逻辑。&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;2. 自增字段的第二类丢失更新&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;session 中维护了未读消息数（unreadCount）、消息总数（totalMsgCount），来了一条新消息必须自增这两个字段。最早的版本是在代码里先读这俩字段，+1再用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;update(session)&lt;/code&gt;写回DB，update是一个全字段的更新动作，但这显然有所谓的“第二类丢失更新”的问题。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;第二类丢失更新问题指的是两个并发的update动作，后提交的（假设B）将先提交的值（假设A）覆盖掉。如果A是一个普通的update倒也没什么问题，但如果A的逻辑是在代码里做自增/自减，然后再更新，那么A的自增/自减就会被覆盖掉：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1433165317854.png&quot; name=&quot;6145a052-5018-425a-82ab-cfdddceb54ca&quot; src=&quot;/assets/img/ee085d1bc8f7e095587ae9061fcfa357.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;解决办法是在DB层面用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;UPDATE&lt;/code&gt;语句做自增自减，利用DB的锁机制保证更新动作的互斥。但这还不够，代码里经常有这样的逻辑：先读一个对象，修改某些字段，再用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;update(obj)&lt;/code&gt;类似的语句更新到DB。如果&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;update(obj)&lt;/code&gt;是全量更新，那么仍然存在问题：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;A 将字段i自增1；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;B 读该对象，修改非i的字段；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;A 提交；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;B update(obj) 并提交事务，A 的自增被覆盖了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;所以最后的解决方案是：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;对每个需要自增自减的字段在DAO层提供&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;incr(incBy)&lt;/code&gt;方法，通过&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;UPDATE&lt;/code&gt;语句自增自减；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;将自增自减字段从各种&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;UPDATE&lt;/code&gt;语句中移除，通过1提供的方法单独维护。&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;3. 锁超时&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;消息中心上线后，PM提出要将原有社区的消息全部迁移到消息中心，当时用了一个数量为24的线程池并发做数据迁移，结果测试时后台JDBC不停地报&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT INTO ... ON DUPLICATE KEY UPDATE&lt;/code&gt; socket超时，而这句SQL是整个事务调用的第一条语句。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;一开始怀疑是网络问题，于是把JDBC连接字符串中的socketTimeout参数调高到10s，然而并没有什么卵用。考虑到只有在数据迁移这样的并发场景下才会出现问题，很自然地想到会不会是锁超时。回顾发布消息的流程，第一步是更新消息所属Session，如果测试数据中有一批连续的消息发送给同一个人，且对应的聚合消息为同一条，那么极端情况下会出现24个线程争用同一把锁的情况。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;但即使如此，如果每个事务的时间都比较短，对最后一个获取锁的事务而言10s也应该够了，除非事务里做了什么耗时的动作。按这个思路用 spring 提供的 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;StopWatch&lt;/code&gt; 分别对数据库操作、模板渲染&amp;amp;保存到Tair两个阶段计时，发现前者平均30ms，后者则高达300ms，问题应该就出在这里。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;修复方法很简单：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;降低线程数量，24–&amp;gt;12；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;将模板渲染 &amp;amp; Tair存取的动作提到事务外面，降低事务耗时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;但这样一来我们就无法利用事务的原子性了，假如模板渲染或Tair失败，事务并不会回滚，用户会看到title或content为空的消息。考虑到真实业务中并不会出现同时给一个人发送大量消息的场景，相对并发程度而言，线上的数据完整性更重要，因此只在数据迁移时用了上面的方案。假如哪天既要保证并发度，又要保证数据完整性，可以使用上述方案，并在第二步失败时手动对数据订正，将脏数据还原或删除；用户在一个极短的时间窗口内是可能看到脏数据的，但这并没有太大影响。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;最后还有一个问题，明明是锁的问题，为啥报 socket 超时呢？这是因为 InnoDB 锁超时时间由参数 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;innodb_lock_wait_timeout&lt;/code&gt;决定，默认值为50s，测试数据库并没有修改，因此 JDBC 只会发现 socket 读超时，而无法感知到锁超时。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;经验&amp;amp;教训：&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;耗时的动作不在事务里做，尽量减少锁的持有时间；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;根据具体业务的特点和需求，在事务的ACID与并发性之间做tradeoff，必要情况下可以允许短暂的脏数据，事后再进行数据订正；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;活用 spring / apache.commons 提供的 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;StopWatch&lt;/code&gt; 分析任务耗时。&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>异常</title>
      <link>http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/%E5%BC%82%E5%B8%B8.html</link>
      <pubDate>17 Aug 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/异常</guid>
      <description>&lt;div style=&quot;color: #2c3f51; font-family: &#39;Helvetica Neue&#39;, Arial, &#39;Hiragino Sans GB&#39;, STHeiti, &#39;Microsoft YaHei&#39;, &#39;WenQuanYi Micro Hei&#39;, SimSun, Song, sans-serif; line-height: 1.6;&quot;&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;

&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;/p&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;1. 异常分类&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;JDK提供的异常基础类关系如下：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;           +---------+   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;           |Throwable|   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;           +-+------++   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;             ^      ^    &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;             |      |    &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    +--------++   +-+---+&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    |Exception|   |Error|&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    +----+----+   +-----+&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;         ^               &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;         |               &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;+--------+-------+       &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;|RuntimeException|       &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;+----------------+       &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;异常分两种：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;继承 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Exception&lt;/code&gt; 的异常类称为&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;checked exception&lt;/strong&gt;，一个方法抛出 checked exception，就必须在方法签名中加上 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;throws&lt;/code&gt; 声明，否则无法通过编译，这也是称为 “checked” 的原因。调用方如果选择继续向上抛出，则也应在自己的方法加上相应声明。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;继承&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;RuntimeException&lt;/code&gt;的异常类称为&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;unchecked exception&lt;/strong&gt;，编译器不会检查。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;2. 什么时候抛出异常&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;《程序员修炼之道-从小工到专家》第四章介绍了一种被称为“Design By Contract（按合约设计）”的设计思路，它认为，程序中的每个函数在提供某项服务，在开始真正逻辑之前，函数对程序当前的状态有某种&lt;em style=&quot;line-height: 1.6;&quot;&gt;期望&lt;/em&gt;，函数对服务成功完成后程序的状态有某种&lt;em style=&quot;line-height: 1.6;&quot;&gt;承诺&lt;/em&gt;。这些&lt;em style=&quot;line-height: 1.6;&quot;&gt;期望&lt;/em&gt;和&lt;em style=&quot;line-height: 1.6;&quot;&gt;承诺&lt;/em&gt;可以这样描述：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Precondition&lt;/strong&gt;：为了调用函数，必须为真的条件，函数的需求。在 Precondition 无法被满足时，函数不应开始提供服务。Precondition 通常指的是&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;参数的合法性&lt;/strong&gt;，调用者有责任保证传递的参数的正确性；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Postcondition&lt;/strong&gt;：函数保证会做的事情，方法完成时程序的状态，一个use case的happy ending；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Class Invariant&lt;/strong&gt;（暂不讨论）：类确保从调用者的视角来看，该条件始终为真。在函数执行过程中，不变项不一定会保持，但在函数退出时，不变项必须为真。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;举个例子，一个方法向指定用户发送push，它接受两个参数，用户id和message，具体实现是：1）查询用户设置，如果用户关闭了push 则不发送；2）查询用户当天收到的push数，超过阈值则不发送；3）调用第三方API，根据id找到设备token；4）调用第三方API，对指定设备发送push。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;对这个方法，id、message不为空这类参数格式约束条件属于 Precondition。方法成功执行后，要么由于用户的设置、收到push太多而选择不push，要么成功向用户发送push，这属于方法的 Postcondition。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;函数和调用者之间的&lt;em style=&quot;line-height: 1.6;&quot;&gt;合约&lt;/em&gt;可以解读为：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;如果调用者满足了函数的所有Precondition，那么函数在完成时，所有Postcondition和Class Invariant为真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;所以，什么时候抛异常？&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;当函数在开始真正业务逻辑之前发现Precondition不满足、业务逻辑进行过程中由于各种原因（业务规则冲突、第三方库调用失败、代码错误等）导致无法满足Postcondition时，抛异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;以上述push方法为例，如果参数id或message为null，违反了Precondition，方法可以立即抛出&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;IllegalArgumentException&lt;/code&gt;而不进入业务逻辑。另一方面，导致方法无法满足Postcondition的原因有很多，比如用户不存在、数据库连接失败、第三方API调用失败、找不到用户的设备token等等，这些情况也应该抛出异常。虽然用户关闭push、接收push过多也会导致push发送失败，但这属于正常的业务逻辑范畴，不算异常情况。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这里有几个常见问题：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;1.&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;为什么不用异常码？&lt;/strong&gt; &lt;br/&gt;
很多人喜欢返回bool表示函数是否成功，或在失败的时候返回null、特殊的异常码。这种方案的第一个问题是，调用方无法知道到底是什么原因导致失败的（返回bool/null）；第二个问题是，调用方可以选择忽略异常码，但异常如果不处理则会沿调用栈上浮，到达最上层的统一异常处理器，或导致当前线程退出，从而实现fail-fast，系统不至于处在一个不稳定的、非正确的状态。此外，异常还可以将错误处理代码隔离到&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;catch&lt;/code&gt;块内，保持正常业务代码整洁。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;2.&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;参数校验谁做？&lt;/strong&gt; &lt;br/&gt;
调用方有责任保证参数的合法性，但函数本身对调用方应该是防御性的，因此最完备的方案是进行两次校验，一次在调用方，一次在函数内。很多情况下这样显得很繁琐，所以如果函数是在一个可信、可控的环境中被调用的，比如调用方和函数都是你写的，那么函数内的参数校验可以省略；但假如你在写一个公共库，那么函数内的参数校验就是必须的。常见的参数校验库有&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FPreconditionsExplained&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Guava 的 Preconditions&lt;/a&gt;、&lt;a href=&quot;http://jinnianshilongnian.iteye.com/blog/1990081&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Bean Validation 1.1 的实现 Hibernate Validator&lt;/a&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;3.&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;异常的情况有很多种，用一堆异常类还是一个异常类+各种ErrorCode？&lt;/strong&gt; &lt;br/&gt;
我的答案是用一堆异常类，原因：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;CashNotEnoughException&lt;/code&gt; 比 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ServiceException&lt;/code&gt; + &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ErrorType.CASH_NOT_ENOUGH&lt;/code&gt; 更显式；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;不同的异常类可以传递不同的上下文和具体异常信息，如&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;CashNotEnoughException&lt;/code&gt;可以捎带用户当前的cash，后者无法做到这一点。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;3. 抛出什么类型的异常&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;OK，现在我们要抛异常了，但究竟抛 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;checked&lt;/code&gt; 还是 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;unchecked&lt;/code&gt; 异常呢？&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;关于这两类异常的争论从来没有停止过，比如&lt;a href=&quot;http://www.iteye.com/topic/2038&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;、&lt;a href=&quot;http://tutorials.jenkov.com/java-exception-handling/checked-or-unchecked-exceptions.html&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;checked的优点是:&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;将异常显式化，强制让caller考虑如何处理异常，不让caller有忘记处理异常的机会&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;可以将这种强制性沿调用栈向上传导。用unchecked，一个caller很难知道调用栈的哪个地方会抛什么异常。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;缺点是污染方法签名（包括抛出异常的函数本身、propagate异常的调用方），增加后期维护成本。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;主流观点是，&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;可恢复的、业务类的异常&lt;/strong&gt;用checked exception，&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;不可恢复的异常&lt;/strong&gt;用unchecked exception，如数据库连接失败、http调用超时。但实践中发现该规则存在的最大问题是，callee如何得知caller是否有能力从某种异常情况下恢复？调用方千变万化，可能A可以恢复B不行，函数本身无法了解这些情况。因此我的选择是，&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;抛弃checked exception，全部使用unchecked exception，并标注在javadoc中&lt;/strong&gt;，让caller自己决定哪些是自己感兴趣可以处理的异常，这是一种更温和的方式。况且，调用一个方法之前了解其可能抛出的异常，这也是一个合格的调用方应该做的。某些语言如C#、Python取消了checked exception这种设计，个人觉得也是有一定道理的。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;4. 异常和日志&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;调用方对方法抛出的异常，要么处理，要么向上冒泡，为了让异常有迹可循，通常要记录在日志中。我的原则是，在&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;异常被处理的地方&lt;/strong&gt;打日志，这个地方可能是“真正”的catch并恢复，也可能是一个最外层的统一的异常拦截器，catch所有未被捕获的异常做统一处理。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;参考文档&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;《Effective Java》Item 57- Item 65&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;《程序员修炼之道-从小工到专家》第四章&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.iteye.com/topic/2038&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;为什么 Java 中要使用 Checked Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-exception-handling/checked-or-unchecked-exceptions.html&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Checked or Unchecked Exceptions?&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Advantages of Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Restful API 的设计规范</title>
      <link>http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html</link>
      <pubDate>17 Aug 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful API 的设计规范</guid>
      <description>&lt;div style=&quot;color: #2c3f51; line-height: 1.6;&quot;&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;

&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Restful API 的设计规范&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. URI&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;URI规范&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;资源集合 vs 单个资源&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;避免层级过深的URI&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;对Composite资源的访问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. Request&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;HTTP方法&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;安全性和幂等性&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;复杂查询&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Bookmarker&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;6. Response&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;分页response&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;7. 错误处理&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;8. 服务型资源&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;9. 异步任务&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;10. API的演进&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;版本&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;URI失效&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;11. 安全&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;本文总结了 RESTful API 设计相关的一些原则，只覆盖了常见的场景。有些规则只是针对自己项目而言，并非其他做法都是错误的。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;1. URI&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;URI 表示资源，资源一般对应服务器端领域模型中的实体类。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;URI规范&lt;/h3&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;不用大写；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;用中杠&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;-&lt;/code&gt;不用下杠&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;_&lt;/code&gt;；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;参数列表要encode；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;URI中的名词表示资源集合，使用复数形式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;资源集合 vs 单个资源&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;URI表示资源的两种方式：资源集合、单个资源。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;资源集合：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;/zoos &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;//所有动物园&lt;/span&gt;
/zoos/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;/animals &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;//id为1的动物园中的所有动物&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;单个资源：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;/zoos/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;//id为1的动物园&lt;/span&gt;
/zoos/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;2&lt;/span&gt;;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;//id为1，2，3的动物园&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;避免层级过深的URI&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;/&lt;/code&gt;在url中表达层级，用于&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;按实体关联关系进行对象导航&lt;/strong&gt;，一般根据id导航。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;过深的导航容易导致url膨胀，不易维护，如 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;GET /zoos/1/areas/3/animals/4&lt;/code&gt;，尽量使用查询参数代替路径中的实体导航，如&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;GET /animals?zoo=1&amp;amp;area=3&lt;/code&gt;；&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;对Composite资源的访问&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;服务器端的组合实体必须在uri中通过父实体的id导航访问。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;组合实体不是first-class的实体，它的生命周期完全依赖父实体，无法独立存在，在实现上通常是对数据库表中某些列的抽象，不直接对应表，也无id。一个常见的例子是 User — Address，Address是对User表中zipCode/country/city三个字段的简单抽象，无法独立于User存在。必须通过User索引到Address：&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;GET /user/1/addresses&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;2. Request&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;HTTP方法&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;通过标准HTTP方法对资源CRUD：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;GET：查询&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;GET&lt;/span&gt; /zoos
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;GET&lt;/span&gt; /zoos/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;GET&lt;/span&gt; /zoos/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;/employees&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;POST：创建单个资源。&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;POST一般向“资源集合”型uri发起&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;POST&lt;/span&gt; /animals  &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;//新增动物&lt;/span&gt;
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;POST&lt;/span&gt; /zoos/1/employees &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;//为id为1的动物园雇佣员工&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;PUT：更新单个资源（全量），客户端提供完整的更新后的资源。与之对应的是 PATCH，PATCH 负责部分更新，客户端提供要更新的那些字段。&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;PUT/PATCH一般向“单个资源”型uri发起&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;PUT &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/animals/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;
PUT &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/zoos/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;DELETE：删除&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;DELETE&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/zoos/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/employees/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;2&lt;/span&gt;
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;DELETE&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/zoos/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/employees/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;2&lt;/span&gt;;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;4&lt;/span&gt;;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;5&lt;/span&gt;
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;DELETE&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/zoos/&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/animals  /&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;/删除id为1的动物园内的所有动物&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;HEAD / OPTION 用的不多，就不多解释了。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;安全性和幂等性&lt;/h3&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;安全性&lt;/strong&gt;：不会改变资源状态，可以理解为只读的；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;幂等性&lt;/strong&gt;：执行1次和执行N次，对资源状态改变的效果是等价的。&lt;/li&gt;
&lt;/ol&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;.&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;安全性&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;幂等性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;GET&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;√&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;POST&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;PUT&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;DELETE&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;安全性和幂等性均不保证反复请求能拿到相同的response。以 DELETE 为例，第一次DELETE返回200表示删除成功，第二次返回404提示资源不存在，这是允许的。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;复杂查询&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;查询可以捎带以下参数：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;.&lt;/th&gt;
&lt;th align=&quot;left&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;示例&lt;/th&gt;
&lt;th align=&quot;left&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;过滤条件&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;?type=1&amp;amp;age=16&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;允许一定的uri冗余，如&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;/zoos/1&lt;/code&gt;与&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;/zoos?id=1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;排序&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;?sort=age,desc&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;投影&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;?whitelist=id,name,email&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;分页&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;?limit=10&amp;amp;offset=3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;Bookmarker&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;经常使用的、复杂的查询标签化，降低维护成本。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;GET /trades?&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;status=&lt;/span&gt;closed&amp;amp;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;sort=&lt;/span&gt;created,desc&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;快捷方式：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;GET&lt;/span&gt; /trades&lt;span style=&quot;line-height: 1.6;&quot;&gt;#recently-closed&lt;/span&gt;
或者
&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;GET&lt;/span&gt; /trades/recently-closed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;Format&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;只用以下常见的3种body format：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Content-Type: application/json&lt;/strong&gt;&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;POST /v1/animal HTTP/1.1
Host: api.example.org
Accept: application/json
Content-Type: application/json
Content-Length: 24

{   
  &quot;name&quot;: &quot;Gir&quot;,
  &quot;animalType&quot;: &quot;12&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Content-Type: application/x-www-form-urlencoded&lt;/strong&gt; (浏览器POST表单用的格式)&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;POST /login HTTP/1.1
Host: example.com
Content-Length: 31
Accept: text/html
Content-Type: application/x-www-form-urlencoded

username=root&amp;amp;password=Zion0101&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Content-Type: multipart/form-data; boundary=—-RANDOM_jDMUxq4Ot5&lt;/strong&gt; (表单有文件上传时的格式)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;Content Negotiation&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;资源可以有多种表示方式，如json、xml、pdf、excel等等，客户端可以指定自己期望的格式，通常有两种方式：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;http header &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Accept&lt;/code&gt;：&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;Accept&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;:application/xml&lt;/span&gt;;q=&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;.&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;6&lt;/span&gt;,application/atom+xml;q=&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;q为各项格式的偏好程度&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;url中加文件后缀：&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;/zoo/1.json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;6. Response&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;不要包装&lt;/strong&gt;： &lt;br/&gt;
response 的 body 直接就是数据，不要做多余的包装。错误示例：&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;{
    &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;success&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;true&lt;/span&gt;,
    &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;data&quot;&lt;/span&gt;:{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;xiaotuan&quot;&lt;/span&gt;},
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;各HTTP方法成功处理后的数据格式：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;left&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;·&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;response 格式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;GET&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;单个对象、集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;POST&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;新增成功的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;PUT/PATCH&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;更新成功的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;DELETE&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;json格式的约定：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;时间用长整形(毫秒数)，客户端自己按需解析（&lt;a href=&quot;http://mementjs.com&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;moment.js&lt;/a&gt;）&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;不传&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;null&lt;/code&gt;字段&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;分页response&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;{
    &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;paging&quot;&lt;/span&gt;:{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;limit&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;10&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;offset&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;total&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;729&lt;/span&gt;},
    &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;data&quot;&lt;/span&gt;:[{},{},{}...]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;7. 错误处理&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;不要发生了错误但给2xx响应，客户端可能会缓存成功的http请求；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;正确设置http状态码，不要自定义；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;对第三点的实现稍微多说一点：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Java 服务器端一般用异常表示 RESTful API 的错误。API 可能抛出两类异常：业务异常和非业务异常。&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;业务异常&lt;/strong&gt;由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;非业务类异常&lt;/strong&gt;表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;业务类异常必须提供2种信息：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;如果抛出该类异常，HTTP 响应状态码应该设成什么；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;异常的文本描述；&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;在Controller层使用统一的异常拦截器：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;设置 HTTP 响应状态码：对业务类异常，用它指定的 HTTP code；对非业务类异常，统一500；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Response Body 的错误码：异常类名&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Response Body 的错误描述：对业务类异常，用它指定的错误文本；对非业务类异常，线上可以统一文案如“服务器端错误，请稍后再试”，开发或测试环境中用异常的 stacktrace，服务器端提供该行为的开关。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;常用的http状态码及使用场景：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;left&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;状态码&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;使用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;400 bad request&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;常用在参数校验&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;401 unauthorized&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;未经验证的用户，常见于未登录。如果经过验证后依然没权限，应该 403（即 authentication 和 authorization 的区别）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;403 forbidden&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;无权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;404 not found&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;资源不存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;500 internal server error&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;非业务类异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;503 service unavaliable&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;由容器抛出，自己的代码不要抛这个异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;8. 服务型资源&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;除了资源简单的CRUD，服务器端经常还会提供其他服务，这些服务无法直接用上面提到的URI映射。如：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;按关键字搜索；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;计算地球上两点间的距离；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;批量向用户推送消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;可以把这些服务看成资源，计算的结果是资源的presentation，按服务属性选择合适的HTTP方法。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;例：&lt;/p&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;GET /search?q=filter?category=file  搜索
GET /distance-calc?lats=&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;47.480&lt;/span&gt;&amp;amp;lngs=-&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;122.389&lt;/span&gt;&amp;amp;late=&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;37.108&lt;/span&gt;&amp;amp;lnge=-&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;122.448&lt;/span&gt;
POST /batch-publish-msg
[{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;from&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;to&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;text&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;abc&quot;&lt;/span&gt;},{},{}&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;...&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;9. 异步任务&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;提交任务：
POST /batch-publish-msg
[{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;from&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;to&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;text&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;abc&quot;&lt;/span&gt;},{},{}&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;...&lt;/span&gt;]

返回：
{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;taskId&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;createBy&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;Anonymous&quot;&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;running&quot;&lt;/span&gt;}

GET /task/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;
{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;taskId&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;createBy&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;Anonymous&quot;&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;success&quot;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果任务的执行状态包括较多信息，可以把“执行状态”抽象成&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;组合资源&lt;/strong&gt;，客户端查询该状态资源了解任务的执行情况。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;提交任务：
POST /batch-publish-msg
[{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;from&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;to&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;text&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;abc&quot;&lt;/span&gt;},{},{}&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;...&lt;/span&gt;]

返回：
{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;taskId&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;createBy&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;Anonymous&quot;&lt;/span&gt;}

GET /task/&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;/status
{&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;progress&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;50%&quot;&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;total&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;18&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;success&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;fail&quot;&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;10. API的演进&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;版本&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;常见的三种方式：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;在uri中放版本信息：&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;GET /v1/users/1&lt;/code&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Accept Header：&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Accept: application/json+v1&lt;/code&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;自定义 Header：&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;X-Api-Version: 1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;用第一种，虽然没有那么优雅，但最明显最方便。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;URI失效&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;11. 安全&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这个不熟，接触到的时候再说。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;参考文档&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&amp;lt; RESTful Web Services Cookbook &amp;gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fgithub.com%2Ftlhunter%2Fconsumer-centric-api-design&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Consumer-Centric API Design&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fwww.zybuluo.com%2Fyanbo-ai%2Fnote%2F17890&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;RESTful Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>InnoDB 锁</title>
      <link>http://novoland.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/2015/08/17/InnoDB%20%E9%94%81.html</link>
      <pubDate>17 Aug 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/2015/08/17/InnoDB 锁</guid>
      <description>&lt;div style=&quot;color: #2c3f51; font-family: &#39;Helvetica Neue&#39;, Arial, &#39;Hiragino Sans GB&#39;, STHeiti, &#39;Microsoft YaHei&#39;, &#39;WenQuanYi Micro Hei&#39;, SimSun, Song, sans-serif; line-height: 1.6;&quot;&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;

&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;InnoDB 锁&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. 事务并发问题&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. 事务隔离级别&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;3. MVCC&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;4. 锁&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;二阶段加锁协议 (Two-Phase Locking)&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;锁的细分&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;表锁&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;意向表锁&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;AUTO_INC表锁&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;表锁的兼容性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;行锁&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;行锁的分类&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;where的执行原理及加锁对象&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;加锁规则&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;行锁的兼容性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;5. 查看锁&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;InnoDB Lock Monitor&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;INFORMATION_SCHEMA 内的表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;6.  两个简单的死锁示例&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;不走索引的DELETE引发的死锁&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;并发INSERT引发的死锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;7. 参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;1. 事务并发问题&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;脏读（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Dirty Read&lt;/code&gt;）： &lt;br/&gt;
A 看到 B 进行中更新的数据，并以此为根据继续执行相关的操作；B 回滚，导致 A 操作的是脏数据。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;不可重复读（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Non-repeatable Read&lt;/code&gt;）： &lt;br/&gt;
A 先查询一次数据，然后 B 更新之并提交，A 再次查询，得到和上一次不同的查询结果。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;幻读（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Phantom Read&lt;/code&gt;）： &lt;br/&gt;
A 查询一批数据，B 插入或删除了某些记录并提交，A 再次查询，发现结果集中出现了上次没有的记录，或者上次有的记录消失了。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;第二类丢失更新 (&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;覆盖丢失&lt;/code&gt;)： &lt;br/&gt;
A 和 B 更新同一条记录并提交，后提交的数据将覆盖先提交的，通常这是没问题的，但是在某些情况下，如在程序中自增自减、程序中的读-改-全量更新，就会出现并发问题。&lt;em style=&quot;line-height: 1.6;&quot;&gt;这类问题更像是应用层面的，不属于DB范畴。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;2. 事务隔离级别&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;read uncommited &lt;br/&gt;
最弱，事务的任何动作对其他事务都是立即可见的。存在脏读、不可重复读、幻读问题（除了回滚丢失，其他的并发问题都有）。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;read commited &lt;br/&gt;
只能读到其他事务已提交的数据，中间状态的数据则看不到，解决了&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;脏读&lt;/code&gt;问题。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;repeatable read  &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;(InnoDB的默认隔离级别)&lt;/strong&gt; &lt;br/&gt;
根据标准的SQL规范，该级别解决了&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;不可重复读&lt;/code&gt;的问题，保证在一个事务内，对同一条记录的重复读都是一致的。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;InnoDB 的 Repeatable Read 通过 &lt;em style=&quot;line-height: 1.6;&quot;&gt;MVCC&lt;/em&gt; 和 &lt;em style=&quot;line-height: 1.6;&quot;&gt;间隙锁&lt;/em&gt; 机制额外解决了&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;幻读&lt;/code&gt;问题。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;serial &lt;br/&gt;
最高，所有读写都是串行的。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;InnoDB 对事务隔离级别的实现依赖两个手段：锁、MVCC(多版本控制协议)。MVCC可以认为是对锁机制的优化，让普通select避免加锁，同时还能有事务隔离级别的语义保证。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;3. MVCC&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;MVCC，Multi-Version Concurrency Control，为一条记录维护多个不同的snapshot，并记录各snapshot对应的版本号（事务ID），每个事务可以读到的snapshot是受限的，从而隔离其他事务的并发动作。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;MVCC并发控制中，读操作分为两类：快照读 (snapshot read)与当前读 (current read)。前者读取的是记录的snapshot(有可能是历史版本)，不用加锁；后者读取的是记录的最新版本，且会加上锁，保证其他事务不会并发修改这条记录。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;快照读：&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;普通的select均为快照读，不用加锁；&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;当前读：&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;select... lock in shared mode&lt;/code&gt;: 读锁&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;select... for update&lt;/code&gt;: 写锁&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;DML（insert/delete/update）：写锁&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;MVCC 只工作在RC &amp;amp; RR两个隔离级别下，Read Uncommited 直接读数据；Serializable 所有读都是当前读。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;在RR级别下，快照读只能读取本事务开始之前的snapshot，反复读同一条记录，不会看到其他事务对它的更新动作；反复执行同一条查询，不会看到其他事务插入的新记录，也不会丢失其他事务删除的记录（删除并非立刻物理删除）。可以看到，RR级别下，普通的select没有&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;不可重复读&lt;/code&gt;和&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;幻读&lt;/code&gt;的问题。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;在RC级别下，快照读读取的是记录最新的snapshot，可以看到其他事务已提交的内容。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;4. 锁&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;二阶段加锁协议 (Two-Phase Locking)&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;事务中只加锁不释放，事务结束一起释放。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;锁的细分&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;锁可以从两个维度上进行细分。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;根据粒度大小（InnoDB 称为 lock type）锁可以细分为&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;表锁&lt;/strong&gt; 和 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;行锁&lt;/strong&gt;。表锁对整个表加锁，影响表内的所有记录，行锁只影响一条记录，粒度更细，并发程度高。行锁根据场景的不同又可以进一步细分（稍后详细介绍）。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://osxr.org/mysql/source/storage/innobase/include/lock0lock.h#0833&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;lock0lock.h&lt;/a&gt;：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;#&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;define&lt;/span&gt; LOCK_TABLE  16  /* table lock */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;#&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;define&lt;/span&gt; LOCK_REC    32  /* record lock */&lt;/span&gt;&lt;/div&gt;&lt;br/&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* Precise modes */&lt;/span&gt;&lt;/div&gt;&lt;br/&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* ... ordinary next-key lock in contrast to LOCK_GAP or LOCK_REC_NOT_GAP*/&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;#&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;define&lt;/span&gt; LOCK_ORDINARY   0   &lt;/span&gt;&lt;/div&gt;&lt;br/&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* ... the lock holds only on the gap before the record; for instance, an x-lock on the gap does not give permission to modify the record on which the bit is set ... */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;#&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;define&lt;/span&gt; LOCK_GAP    512 &lt;/span&gt;&lt;/div&gt;&lt;br/&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* ... the lock is only on the index record and does NOT block inserts to the gap before the index record; this is used in the case when we retrieve a record with a unique key, and is also used in locking plain SELECTs (not part of UPDATE or DELETE) when the user has set the READ COMMITTED isolation level */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;#&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;define&lt;/span&gt; LOCK_REC_NOT_GAP 1024   &lt;/span&gt;&lt;/div&gt;&lt;br/&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* this bit is set when we place a waiting gap type record lock request in order to let an insert of an index record to wait until there are no conflicting locks by other transactions on the gap; note that this flag remains set when the waiting lock is granted, or if the lock is inherited to a neighboring record */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;#&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;define&lt;/span&gt; LOCK_INSERT_INTENTION 2048 &lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;锁的 mode 分类如下所示：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://osxr.org/mysql/source/storage/innobase/include/lock0types.h&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;lock0types.h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* Basic lock modes */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;enum&lt;/span&gt; lock_mode {&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    LOCK_IS = &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* intention shared */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    LOCK_IX,    &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* intention exclusive */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    LOCK_S,     &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* shared */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    LOCK_X,     &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* exclusive */&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    LOCK_AUTO_INC,  &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;/* locks the auto-inc counter of a table in an exclusive mode*/&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    ...&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;};&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;将锁分为读锁和写锁主要是为了提高读的并发，它们的兼容性矩阵：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  S  X&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;S +  – &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;X -  -&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;IX(写意向)、IS(读意向)只会应用在表锁上，方便表锁和行锁之间的冲突检测。&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;LOCK_AUTO_INC&lt;/code&gt;是一种特殊的表锁。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;表锁&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;LOCK TABLES t1 READ, t2 WRITE&lt;/code&gt; 对表加 S 或 X 锁、&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ALTER TABLE&lt;/code&gt;需要加 X 锁。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;表锁的实现有两个层面，MySQL Server 和 InnoDB 存储引擎，innodb_table_locks 参数为1（默认值）表明当 autocommit 关闭时启用 InnoDB 表锁。此时调用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;LOCK TABLES&lt;/code&gt;,  MySQL Server 和 InnoDB 都会加表锁，不同的是，前者加的锁只有显式调用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;UNLOCK TABLES&lt;/code&gt; 才会释放，InnoDB 层面的表锁则会在事务提交时自动释放。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;LOCK TABLES&lt;/code&gt; 搭配 InnoDB 表锁的正确使用姿势：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;SET autocommit=&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;LOCK TABLES t1 WRITE, t2 READ, &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;...&lt;/span&gt;;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;...&lt;/span&gt; do something with tables t1 and t2 here &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;...&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;COMMIT;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;UNLOCK TABLES;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Manual：&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.6%2Fen%2Flock-tables-and-transactions.html&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Interaction of Table Locking and Transactions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;意向表锁&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;表锁锁定了整张表，因此表锁和行锁之间也会冲突，为了方便检测表锁和行锁的冲突引入了&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;意向表锁&lt;/strong&gt;。&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;意向锁分为意向读锁(IS)和意向写锁(IX)。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;意向锁是表级锁，但表示事务试图读或写某一行记录，而不是整个表。所以意向锁之间不会产生冲突，真正的冲突在加行锁时检查。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;在给一行记录加锁前，首先要给该表加意向锁。也就是要同时加表意向锁和行锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;AUTO_INC表锁&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;为一个AUTO_INCREMENT列生成自增值前，必须先为该表加 AUTO_INC 表锁。AUTO_INC 表锁有些特别的地方：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;每个表最多只能有一个自增锁&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;为了提高并发插入的性能，&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;自增锁不遵循二阶段锁协议&lt;/strong&gt;，加锁释放锁不跟事务而跟语句走，insert开始时获取，结束时释放&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;自增值只要分配了就会+1，不管事务是否提交了都不会撤销，所以可能出现空洞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;从5.1.22开始，MySQL 提供了一种可选的轻量级锁(mutex)机制代替AUTO_INC表锁，参数 innodb_autoinc_lock_mode 控制分配自增值时的并发策略。介绍该参数之前先引入几个insert相关的概念：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Simple inserts&lt;/strong&gt;：通过分析insert语句可以确定插入数量的insert语句，如&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT, INSERT … VALUES(1,2),VALUES(3,4)&lt;/code&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Bulk inserts&lt;/strong&gt;：通过分析insert语句无法知道插入数量的insert语句，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT … SELECT, REPLACE … SELECT, LOAD DATA&lt;/code&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Mixed-mode inserts&lt;/strong&gt;：不确定是否需要分配auto_increment id，一般是下面两种情况&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INSERT&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INTO&lt;/span&gt; t1 (c1,c2) &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;VALUES&lt;/span&gt; (&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&#39;a&#39;&lt;/span&gt;), (&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;NULL&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&#39;b&#39;&lt;/span&gt;), (&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&#39;c&#39;&lt;/span&gt;), (&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;NULL&lt;/span&gt;,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&#39;d&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;-- 有些指定了id，有些没&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INSERT&lt;/span&gt; … &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;ON&lt;/span&gt; DUPLICATE &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;KEY&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;UPDATE&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;参数innodb_autoinc_lock_mode可以取下列值：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;innodb_autoinc_lock_mode=0 （traditional lock mode）&lt;/strong&gt; &lt;br/&gt;
使用传统的 AUTO_INC 表锁，并发性比较差；&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;innodb_autoinc_lock_mode=1 （consecutive/连续 lock mode）默认值&lt;/strong&gt; &lt;br/&gt;
折中方式，bulk 不能确定插入数用表锁，simple、mix用mutex，只锁住预分配自增ID的过程，不锁整张表。Mixed-mode inserts 会直接分析语句，获得最坏情况下需要插入的数量，一次性分配足够的auto_increment id，缺点是会分配过多的id，导致“浪费”和空洞。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这种模式既平衡了并发性，又能保证&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;同一条insert语句分配的自增id是连续的&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;innodb_autoinc_lock_mode=2 （interleaved/交叉 lock mode）&lt;/strong&gt; &lt;br/&gt;
全部都用mutex，并发性能最高，id一个一个分配，不会预分配。缺点是不能保证同一条insert语句内的id是连续的，但是在replication中，当binlog_format为statement-based时（基于语句的复制）存在问题，因为是来一个分配一个，同一条insert语句内获得的自增id可能不连续，主从数据集会出现数据不一致。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;表锁的兼容性&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;以上表锁的兼容性矩阵如下：（+兼容，-不兼容）&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;right&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;IS&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;IX&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;S&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;X&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;AI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;right&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;IS&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;right&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;IX&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;right&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;S&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;right&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;X&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;right&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;AI&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;意向表锁只会阻塞X/S表锁，不会阻塞意向表锁和AUTO_INC表锁；&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;行锁&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;行锁的分类&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;行锁从mode上分为X、S，type上进一步细分为以下类型：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;LOCK_GAP&lt;/strong&gt;：GAP锁，锁两个记录之间的GAP，防止记录插入；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;LOCK_ORDINARY&lt;/strong&gt;：官方文档中称为 “Next-Key Lock” ，锁一条记录及其&lt;em style=&quot;line-height: 1.6;&quot;&gt;之前&lt;/em&gt;的间隙，这是RR级别用的最多的锁，从名字也能看出来；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;LOCK_REC_NOT_GAP&lt;/strong&gt;：只锁记录；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;LOCK_INSERT_INTENSION&lt;/strong&gt;：插入意向GAP锁，插入记录时使用，是LOCK_GAP的一种特例。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;RC级别只有记录锁，没有 Next-Key Lock 和 GAP锁，因此存在幻读现象。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;行锁是加在记录上的锁，InnoDB中的记录是以B+树索引的方式组织在一起的，InnoDB的行锁实际是 index record lock，即对B+索引叶子节点的锁。索引可能有多个，因此操作一行数据时，有可能会加多个行锁在不同的B+树上。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;where的执行原理及加锁对象&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;分析不同SQL语句的加锁情况前，有必要先介绍下 SQL 中 where 条件是怎么解析和执行的。假设 where 走某个Secondary索引A，where 中所有的条件可以分为三类：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;index key&lt;/strong&gt;：用于确定索引&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;扫描&lt;/strong&gt;的起始位置和结束位置，因为是范围，所以分 index first key 和 index last key。查询时，先通过 index first key 条件在B+树上做一次&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;搜索&lt;/strong&gt;确定扫描开始位置（从B+树的根节点一层层往下找），从该处开始沿着叶子节点组成的链表扫描，碰到的每个节点都要与 index last key 比对，判断是否超出扫描范围。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;注意&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;扫描&lt;/strong&gt; / &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;搜索&lt;/strong&gt;的区别：搜索是从根节点到叶子节点的定位过程，扫描针对的是索引叶子节点组成的链表。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;index filter&lt;/strong&gt;：是索引A的字段，但无法应用在搜索过程中，只能在扫描索引时对结果集进行过滤，不需额外查询聚集索引；&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;table filter&lt;/strong&gt;：不是索引A的字段，innodb 对根据前面两个条件扫描得到的结果集，去聚集索引上读了完整数据后返回给MySQL Server，后者再用table filter过滤。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;对于除 insert 以外的&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;当前读&lt;/strong&gt;，如 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;SELECT…[FOR UPDATE | LOCK IN SHARE MODE]&lt;/code&gt;、&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;UPDATE&lt;/code&gt;、&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;DELETE&lt;/code&gt;，加锁的对象是&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;索引扫描后，将要返回给MySQL Server进一步过滤的那些记录&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;在MySQL 5.6之前，并不区分Index Filter与Table Filter，统统将Index First Key与Index Last Key范围内的索引记录，回表读取完整记录，然后返回给MySQL Server层进行过滤。而在MySQL 5.6之后，Index Filter与Table Filter分离，Index Filter下降到InnoDB的索引层面进行过滤，减少了回表与返回MySQL Server层的记录交互开销，提高了SQL的执行效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;加锁规则&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;在RR级别下，有如下加锁规则：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;用于搜索和扫描的（where条件走的）索引，加 Next-Key Lock。对于扫描得到的最后一个记录，还要对它和下一条记录之间的空隙加 GAP Lock。&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;记录间的间隙（包括第一个记录之前、最后一个记录之后的间隙）都加了锁，新的记录无法插入到这些位置，保证了不会出现幻读&lt;/strong&gt;；&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果索引是唯一索引或主索引，且SQL是个等值查询，由于有唯一性的保证，可不用锁间隙，加Record Lock 而非 Next-Key Lock。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果没有查询到记录，定位到的GAP依然会被锁上，这样才不会出现幻读。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;where索引扫描的结果集，在其他索引上对应的记录，加Record Lock；&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;不同索引的加锁顺序：where索引 –&amp;gt; 主索引 –&amp;gt; 其他二级索引；&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果没法走索引而走全表扫描，主索引的全部记录都会加 Next-Key Lock，加锁的顺序不定。此时该表除了不加锁的快照读，其他所有需要加锁的SQL如插入、更新、删除均不可执行。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;MySQL Server层对这种情况会做优化，不符合条件的记录会立刻释放锁，但这种优化违背了二阶段锁协议，而且InnoDB加锁的动作不会省略。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT&lt;/code&gt; 的加锁：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;插入之前，对插入的间隙加插入意向GAP锁 ；&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;插入意向GAP锁表明将向某个间隙插入记录，如果该间隙已被加上了GAP Lock或Next-Key Lock，则加锁失败。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;不同事务加的插入意向GAP锁互相兼容，否则就无法并发insert了。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;插入成功后，对插入的这条记录加X Record Lock；&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果违反唯一性约束导致插入失败，则对记录加S Next-Key Lock。这一点在并发插入时可能导致死锁。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;行锁的兼容性&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;S锁和S锁完全兼容，兼容性检测只发生在S和X、X和S之间。行锁的兼容性矩阵如下（由&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;lock0lock.c:lock_rec_has_to_wait()&lt;/code&gt; 函数推出）：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;.&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;GAP&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;II GAP&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;RECORD&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;NEXT-KEY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;GAP&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;II GAP&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;RECORD&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;NEXT-KEY&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;第一行，GAP锁不需要等待其他任何行锁（why？）；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第二行，GAP锁、Next-Key锁会阻止 Insert；插入意向锁互相是兼容的，即并发插入是允许的；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第三行，RECORD锁和RECORD锁、Next-Key锁冲突；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;第二列，已有的插入意向GAP锁不会阻止任何锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;5. 查看锁&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;InnoDB Lock Monitor&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;InnoDB 提供了InnoDB Monitor，可以显示InnoDB的内部状态，打开该项特性后，每隔15秒MySQL就会把&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;SHOW ENGINE INNODB STATUS&lt;/code&gt;命令的输出重定向到标准错误输出流，如果设置了innodb-status-file=1 ，还会将上述命令的输出额外写到一个名为&lt;em style=&quot;line-height: 1.6;&quot;&gt;innodb_status.pid&lt;/em&gt;的文件中。此外，如果开启了InnoDB Lock Monitor，还会打印额外的锁信息。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;MySQL 5.6.16 以后使用以下两个命令打开 InnoDB Standard Monitor 和 InnoDB Lock Monitor：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;set&lt;/span&gt; global innodb_status_output=ON;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;set&lt;/span&gt; global innodb_status_output_locks=ON;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;SHOW ENGINE INNODB STATUS&lt;/code&gt; 的输出示例：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;———— &lt;br/&gt;
TRANSACTIONS &lt;br/&gt;
———— &lt;br/&gt;
Trx id counter 169246 &lt;br/&gt;
Purge done for trx’s n:o &amp;lt; 169198 undo n:o &amp;lt; 0 state: running but idle &lt;br/&gt;
History list length 802 &lt;br/&gt;
LIST OF TRANSACTIONS FOR EACH SESSION:&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;事务1&lt;/strong&gt;： &lt;br/&gt;
—TRANSACTION 169245, ACTIVE 4 sec inserting &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;LOCK WAIT 2 lock&lt;/strong&gt; struct(s), heap size 360, 1 row lock(s)  &lt;em style=&quot;line-height: 1.6;&quot;&gt;==== 事务在等待锁，涉及两个锁，其中1个是行锁&lt;/em&gt; &lt;br/&gt;
MySQL thread id 699, OS thread handle 0x7fd4ad4e3700, query id 10304 localhost root update &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;insert into t2 values(3,3)&lt;/strong&gt; &lt;em style=&quot;line-height: 1.6;&quot;&gt;==== 正在执行的SQL&lt;/em&gt; &lt;br/&gt;
——- TRX HAS BEEN WAITING 4 SEC FOR THIS LOCK TO BE GRANTED: &lt;br/&gt;
RECORD LOCKS space id 8 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t2&lt;/code&gt; trx id 169245 lock_mode X locks gap before rec insert intention waiting &lt;br/&gt;
—————— &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;TABLE LOCK&lt;/strong&gt; table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t2&lt;/code&gt; trx id 169245 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock mode IX&lt;/strong&gt; &lt;em style=&quot;line-height: 1.6;&quot;&gt;==== IX插入意向表锁&lt;/em&gt; &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;RECORD LOCKS&lt;/strong&gt; space id 8 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t2&lt;/code&gt; trx id 169245 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode X locks gap before rec insert intention&lt;/strong&gt; waiting &lt;em style=&quot;line-height: 1.6;&quot;&gt;====在等待X插入意向GAP锁&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;事务2&lt;/strong&gt;： &lt;br/&gt;
—TRANSACTION 169244, ACTIVE 11 sec &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;2 lock struct(s)&lt;/strong&gt;, heap size 360, 1 row lock(s) &lt;br/&gt;
MySQL thread id 698, OS thread handle 0x7fd4a3c54700, query id 10305 localhost root init &lt;br/&gt;
show engine INNODB status &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;TABLE LOCK table&lt;/strong&gt; &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t2&lt;/code&gt; trx id 169244 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock mode IX&lt;/strong&gt; &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;RECORD LOCKS&lt;/strong&gt; space id 8 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t2&lt;/code&gt; trx id 169244 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode X locks gap before rec&lt;/strong&gt; &lt;em style=&quot;line-height: 1.6;&quot;&gt;====GAP锁&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;各种锁在&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;show engine InnoDB status&lt;/code&gt;中的表现：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;锁类型&lt;/th&gt;
&lt;th style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;LOCK_TABLE&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;TABLE LOCK table xxx lock mode [S|X|IS|IX]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;LOCK_REC_NOT_GAP&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;RECORD LOCKS … lock_mode [X|S] locks rec but not gap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;LOCK_ORNIDARY&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;RECORD LOCKS … lock_mode [X|S]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;LOCK_GAP&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;RECORD LOCKS … lock_mode [X|S] locks gap before rec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;LOCK_INSERT_INTENTION&lt;/td&gt;
&lt;td style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;RECORD LOCKS … lock_mode X insert intention&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;INFORMATION_SCHEMA 内的表&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;INNODB_TRX&lt;/strong&gt;： &lt;br/&gt;
当前正在执行的事务详情&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;INNODB_LOCKS&lt;/strong&gt;： &lt;br/&gt;
每个引起阻塞的锁两个记录。1.哪个事务持有；2.哪个事务请求。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;示例：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;*************************** &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1.&lt;/span&gt; row ***************************&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    lock_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169245&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;lock_trx_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169245&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_mode: X,GAP      &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// -- row-&amp;gt;lock_mode = lock_get_mode_str(lock)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_type: RECORD     &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// -- row-&amp;gt;lock_type = lock_get_type_str(lock)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; lock_table: test.t2    &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; lock_index: PRIMARY&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; lock_space: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_page: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;   lock_rec: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_data: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;*************************** &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;2.&lt;/span&gt; row ***************************&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    lock_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169244&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;lock_trx_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169244&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_mode: X,GAP&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_type: RECORD&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; lock_table: test.t2&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; lock_index: PRIMARY&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; lock_space: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_page: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;   lock_rec: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  lock_data: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode: [X|S|IX|IS], [GAP]&lt;/strong&gt;，只有LOCK_GAP才会显示GAP，见 lock_get_mode_str()。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_type: [Record|Table]&lt;/strong&gt;，只能区分表锁、行锁，行锁的细分模式无法识别。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;INNODB_LOCK_WAITS&lt;/strong&gt; &lt;br/&gt;
每个被锁阻塞的事务一个记录。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;示例：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;*************************** &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1.&lt;/span&gt; row ***************************&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;requesting_trx_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169245&lt;/span&gt;           &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// 请求锁的事务&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;requested_lock_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169245&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;     &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// 请求的锁ID&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  blocking_trx_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169244&lt;/span&gt;           &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// 持有锁的事务&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; blocking_lock_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169244&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;8&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;:&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;3&lt;/span&gt;     &lt;span style=&quot;line-height: 1.6; color: #75715e;&quot;&gt;// 导致阻塞的锁ID，和请求的锁ID是同一个锁，只是事务前缀不一样&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;row in &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;set&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;(0.00 sec)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;用一个神奇的SQL把这些表join起来分析……&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    r.trx_id waiting_trx_id,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    r.trx_mysql_thread_id waiting_thread,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;left&lt;/span&gt;(r.trx_query,&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;20&lt;/span&gt;) waiting_query,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;concat&lt;/span&gt;(&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;concat&lt;/span&gt;(lw.lock_type,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&#39; &#39;&lt;/span&gt;),&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    lw.lock_mode) waiting_for_lock,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    b.trx_id blocking_trx_id,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    b.trx_mysql_thread_id blocking_thread,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;left&lt;/span&gt;(b.trx_query,&lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;20&lt;/span&gt;) blocking_query,&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;concat&lt;/span&gt;(&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;concat&lt;/span&gt;(lb.lock_type,&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&#39; &#39;&lt;/span&gt;),&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    lb.lock_mode) blocking_lock   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;FROM&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    information_schema.innodb_lock_waits w   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INNER&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;JOIN&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    information_schema.innodb_trx b &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;        &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;ON&lt;/span&gt; b.trx_id = w.blocking_trx_id   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INNER&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;JOIN&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    information_schema.innodb_trx r &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;        &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;ON&lt;/span&gt; r.trx_id = w.requesting_trx_id   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INNER&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;JOIN&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    information_schema.innodb_locks lw &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;        &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;ON&lt;/span&gt; lw.lock_trx_id = r.trx_id   &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;INNER&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;JOIN&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;    information_schema.innodb_locks lb &lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;        &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;ON&lt;/span&gt; lb.lock_trx_id = b.trx_id&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;结果：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;*************************** &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;1.&lt;/span&gt; row ***************************&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  waiting_trx_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169245&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  waiting_thread: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;   waiting_query: insert into t2 value&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;waiting_for_lock: RECORD X,GAP&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; blocking_trx_id: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;169244&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt; blocking_thread: &lt;span style=&quot;line-height: 1.6; color: #ae81ff;&quot;&gt;698&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;  blocking_query: SELECT r.trx_id wait&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;   blocking_lock: RECORD X,GAP&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;6.  两个简单的死锁示例&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;不走索引的DELETE引发的死锁&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;SHOW ENGINE INNODB STATUS&lt;/code&gt;显示的死锁现场：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;———————— &lt;br/&gt;
LATEST DETECTED DEADLOCK &lt;br/&gt;
———————— &lt;br/&gt;
150626 11:02:07 &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (1) TRANSACTION: &lt;br/&gt;
TRANSACTION 13260F7, ACTIVE 0 sec starting index read &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
LOCK WAIT 5 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2 &lt;br/&gt;
MySQL thread id 216331, OS thread handle 0x7f5784637700, query id 136610709 10.32.57.98 movie_mc updating &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;DELETE FROM mc_message WHERE msg_session_id = 1250079&lt;/strong&gt; &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (1) WAITING FOR THIS LOCK TO BE GRANTED: &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;RECORD LOCKS&lt;/strong&gt; space id 10 page no 5 n bits 328 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;movie_message_center&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;mc_message&lt;/code&gt; trx id 13260F7 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode X&lt;/strong&gt; waiting&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (2) TRANSACTION: &lt;br/&gt;
TRANSACTION 13260F5, ACTIVE 0 sec fetching rows &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
4815 lock struct(s), heap size 588216, &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;1237194 row lock(s)&lt;/strong&gt;, undo log entries 1 &lt;br/&gt;
MySQL thread id 219612, OS thread handle 0x7f5727c78700, query id 136610669 10.32.56.108 movie_mc updating &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;DELETE FROM mc_message WHERE msg_session_id = 1348342&lt;/strong&gt; &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (2) HOLDS THE LOCK(S): &lt;br/&gt;
RECORD LOCKS space id 10 page no 5 n bits 328 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;movie_message_center&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;mc_message&lt;/code&gt; trx id 13260F5 lock_mode X &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (2) WAITING FOR THIS LOCK TO BE GRANTED: &lt;br/&gt;
RECORD LOCKS space id 10 page no 8425 n bits 328 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;movie_message_center&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;mc_message&lt;/code&gt; trx id 13260F5 lock_mode X waiting &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; WE ROLL BACK TRANSACTION (1)&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;RR级别，对一张表的两个简单delete语句引起了死锁。由于没有走索引，delete导致主索引的所有记录及间隙都被锁上，LOG中也可以看到，第二个事务持有123万把行锁（Next-Key Lock），且由于加锁的顺序是不定的，导致死锁。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;并发INSERT引发的死锁&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这种死锁现象涉及三个以上并发事务，执行同一条insert语句引发死锁。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;表的结构：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;CREATE&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;TABLE&lt;/span&gt; t1 (i &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;INT&lt;/span&gt;, &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;PRIMARY&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;KEY&lt;/span&gt; (i)) &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;ENGINE&lt;/span&gt; = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;InnoDB&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;事务执行序列：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px; line-height: 1.6;&quot;&gt;
&lt;thead style=&quot;line-height: 1.6;&quot;&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;tx0&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;tx1&lt;/th&gt;
&lt;th align=&quot;center&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; border-top: 0; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;tx2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody style=&quot;line-height: 1.6;&quot;&gt;&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT INTO t1 VALUES(1)&lt;/code&gt;，成功&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT INTO t1 VALUES(1)&lt;/code&gt;，阻塞&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT INTO t1 VALUES(1)&lt;/code&gt;，阻塞&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;rollback&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;line-height: 1.6;&quot;&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;死锁&lt;/td&gt;
&lt;td align=&quot;center&quot; style=&quot;padding: .5em; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd; line-height: 1.6;&quot;&gt;死锁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;SHOW ENGINE INNODB STATUS&lt;/code&gt;分析一下：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;第一步：tx0插入成功&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;—TRANSACTION 0, ACTIVE 48 sec &lt;br/&gt;
1 lock struct(s), heap size 360, 0 row lock(s), undo log entries 1 &lt;br/&gt;
MySQL thread id 702, OS thread handle 0x7fd4ad481700, query id 10384 localhost root cleaning up &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;TABLE LOCK table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169250 lock mode IX&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;按之前的分析，tx0插入成功过后应对记录加X Record Lock，但log只显示了一个IX表锁，这是因为InnoDB对锁有两种实现，一种隐式，一种显式。显式的锁需要维护特有的数据结构，隐式锁是根据当前事务ID和记录中的事务ID计算出来的，开销更小：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;隐式锁是针对被修改的B+Tree记录，因此都是Record类型的锁。不可能是Gap或Next-Key类型；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT&lt;/code&gt;成功后对记录加的X锁，都是隐式锁；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;UPDATE&lt;/code&gt;、&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;DELETE&lt;/code&gt; 对 where 索引和主索引用显式锁，其他二级索引上的Record Lock用隐式锁；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;隐式锁发生冲突时会转换成显式锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;第二步：tx1、tx2插入阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;—&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;TRANSACTION 2&lt;/strong&gt;, ACTIVE 2 sec inserting &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
LOCK WAIT 2 lock struct(s), heap size 360, 1 row lock(s) &lt;br/&gt;
MySQL thread id 704, OS thread handle 0x7fd4a3b90700, query id 10389 localhost root update &lt;br/&gt;
INSERT INTO t1 VALUES(1) &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;——- TRX HAS BEEN WAITING 2 SEC FOR THIS LOCK TO BE GRANTED:&lt;/strong&gt; &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169252 lock mode S locks rec but not gap waiting&lt;/strong&gt; &lt;br/&gt;
—————— &lt;br/&gt;
TABLE LOCK table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169252 lock mode IX &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169252 lock mode S locks rec but not gap waiting&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;—&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;TRANSACTION 1&lt;/strong&gt;, ACTIVE 4 sec inserting &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
LOCK WAIT 2 lock struct(s), heap size 360, 1 row lock(s) &lt;br/&gt;
MySQL thread id 703, OS thread handle 0x7fd4ac144700, query id 10388 localhost root update &lt;br/&gt;
INSERT INTO t1 VALUES(1) &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;——- TRX HAS BEEN WAITING 4 SEC FOR THIS LOCK TO BE GRANTED:&lt;/strong&gt; &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 lock mode S locks rec but not gap waiting&lt;/strong&gt; &lt;br/&gt;
—————— &lt;br/&gt;
TABLE LOCK table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 lock mode IX &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 lock mode S locks rec but not gap waiting&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;—&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;TRANSACTION 0&lt;/strong&gt;, ACTIVE 105 sec &lt;br/&gt;
2 lock struct(s), heap size 360, 1 row lock(s), undo log entries 1 &lt;br/&gt;
MySQL thread id 702, OS thread handle 0x7fd4ad481700, query id 10384 localhost root cleaning up &lt;br/&gt;
TABLE LOCK table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169250 lock mode IX &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169250 lock_mode X locks rec but not gap&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;tx0的隐式X Record Lock转成了显式；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;tx1和tx2 duplicate-key error，试图对记录加S Record Lock，阻塞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;第三步：tx0 rollback，发生死锁，tx2被回滚，tx1成功&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;看看tx1成功后持有的锁：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;—TRANSACTION 1, ACTIVE 99 sec &lt;br/&gt;
5 lock struct(s), heap size 1184, 3 row lock(s), undo log entries 1 &lt;br/&gt;
MySQL thread id 703, OS thread handle 0x7fd4ac144700, query id 10391 localhost root cleaning up &lt;br/&gt;
TABLE LOCK table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 lock mode IX &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock mode S locks rec but not gap&lt;/strong&gt; &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock mode S&lt;/strong&gt; &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode X insert intention&lt;/strong&gt; &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock mode S locks gap before rec&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;tx1加了一堆的行锁，仔细查看会发现，tx1获取了第二步请求的S Record Lock后再次尝试插入，这里会先加一个S Next-Key Lock 和 S GAP Lock（根据log推测，没有找到文献支持），然后才加 Insert Intention GAP Lock。 &lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;再看看死锁日志： &lt;br/&gt;
———————— &lt;br/&gt;
LATEST DETECTED DEADLOCK &lt;br/&gt;
———————— &lt;br/&gt;
2015-08-07 11:17:47 7fd4a3b90700 &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (1) TRANSACTION: &lt;br/&gt;
TRANSACTION 1, ACTIVE 94 sec inserting &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
LOCK WAIT 4 lock struct(s), heap size 1184, 2 row lock(s) &lt;br/&gt;
MySQL thread id 703, OS thread handle 0x7fd4ac144700, query id 10391 localhost root update &lt;br/&gt;
INSERT INTO t1 VALUES(1) &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (1) WAITING FOR THIS LOCK TO BE GRANTED: &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169251 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode X insert intention waiting&lt;/strong&gt; &amp;lt;====== 等待 II GAP Lock&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (2) TRANSACTION: &lt;br/&gt;
TRANSACTION 2, ACTIVE 92 sec inserting &lt;br/&gt;
mysql tables in use 1, locked 1 &lt;br/&gt;
4 lock struct(s), heap size 1184, 2 row lock(s) &lt;br/&gt;
MySQL thread id 704, OS thread handle 0x7fd4a3b90700, query id 10392 localhost root update &lt;br/&gt;
INSERT INTO t1 VALUES(1) &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (2) HOLDS THE LOCK(S): &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169252 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock mode S&lt;/strong&gt;     &amp;lt;======== 持有 S Next-Key Lock &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; (2) WAITING FOR THIS LOCK TO BE GRANTED: &lt;br/&gt;
RECORD LOCKS space id 442 page no 3 n bits 72 index &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;PRIMARY&lt;/code&gt; of table &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;test&lt;/code&gt;.&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;t1&lt;/code&gt; trx id 169252 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;lock_mode X insert intention waiting&lt;/strong&gt; &lt;br/&gt;
&lt;em style=&quot;line-height: 1.6;&quot;&gt;*&lt;/em&gt; WE ROLL BACK TRANSACTION (2) &amp;lt;====== 等待 II GAP Lock&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;从日志可知，tx1和tx2在tx0 rollback之后，均成功获得了记录的 S Next-Key Lock，接着二者同时请求 Insert Intention GAP Lock，但与对方持有的 S Next-Key Lock 冲突，死锁发生。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;7. 参考文档&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;MySQL各种官方文档&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://hedengcheng.com/?p=771&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;何登成的技术博客 » MySQL 加锁处理分析&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://hedengcheng.com/?p=577&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;何登成的技术博客 » SQL中的where条件，在数据库中提取与应用浅析&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.zhdba.com/mysqlops/2012/05/19/locks_in_innodb/&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;MySQL数据库InnoDB存储引擎中的锁机制&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fbugs.mysql.com%2Fbug.php%3Fid%3D35821&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Bug #35821&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fwww.percona.com%2Fblog%2F2012%2F08%2F28%2Fdifferences-between-read-committed-and-repeatable-read-transaction-isolation-levels%2F&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Differences between READ-COMMITTED and REPEATABLE-READ transaction isolation levels&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/valeriikravchuk1/understanding-innodb-locks-and-deadlocks&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Understanding innodb locks and deadlocks BY PERCONA&lt;/a&gt;，强烈推荐&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;《高性能MySQL》&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>INSERT ON DUPLICATE KEY UPDATE 几个要注意的问题</title>
      <link>http://novoland.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/2015/08/17/INSERT%20ON%20DUPLICATE%20KEY%20UPDATE%20%E5%87%A0%E4%B8%AA%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98.html</link>
      <pubDate>17 Aug 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/2015/08/17/INSERT ON DUPLICATE KEY UPDATE 几个要注意的问题</guid>
      <description>&lt;div style=&quot;color: #2c3f51; font-family: &#39;Helvetica Neue&#39;, Arial, &#39;Hiragino Sans GB&#39;, STHeiti, &#39;Microsoft YaHei&#39;, &#39;WenQuanYi Micro Hei&#39;, SimSun, Song, sans-serif; line-height: 1.6;&quot;&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;

&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;/p&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;1. rows affected 是多少？&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;根据官方文档：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;For INSERT … ON DUPLICATE KEY UPDATE statements, the affected-rows value per row is 1 if the row is inserted as a new row, 2 if an existing row is updated, and 0 if an existing row is set to its current values. If you specify the CLIENT_FOUND_ROWS flag, the affected-rows value is 1 (not 0) if an existing row is set to its current values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;总结下，insert 1，update 2，update 的值和原来的值一样 0。但如果通过 JDBC 调用，最后一种情况也会返回1，这是因为客户端连接时如果设置了 CLIENT_FOUND_ROWS 标志，会用 rows found 代替 rows affected 当做返回值，而JDBC默认是会设置该标志的。在 JDBC 连接字符串中指定 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;useAffectedRows=true&lt;/code&gt; 可以取消这个flag。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;useAffectedRows&lt;/strong&gt; &lt;br/&gt;
  Don’t set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on “found” rows vs. “affected rows” for DML statements), but does cause “correct” update counts from “INSERT … ON DUPLICATE KEY UPDATE” statements to be returned by the server. &lt;br/&gt;
  Default: false &lt;br/&gt;
  Since version: 5.1.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;2. 执行后，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;select LAST_INSERT_ID()&lt;/code&gt; 返回什么？&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;上官方文档：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;If a table contains an AUTO_INCREMENT column and INSERT … UPDATE inserts a row, the LAST_INSERT_ID() function returns the AUTO_INCREMENT value. If the statement updates a row instead, LAST_INSERT_ID() is not meaningful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;insert：返回刚刚生成的自增ID，update：&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;返回值无意义&lt;/strong&gt;，MyBatis实测返回0而不是null，因此DAO这么写：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;@Insert&lt;/span&gt;(&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot; INSERT INTO ... ON DUPLICATE KEY UPDATE ...&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;@SelectKey&lt;/span&gt;(statement = &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;SELECT LAST_INSERT_ID() AS id&quot;&lt;/span&gt;, keyProperty = &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;id&quot;&lt;/span&gt;, before = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;false&lt;/span&gt;, resultType = Long.class)&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;insert&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;(Entity obj)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;然后调用方试图通过观察 id 是否为null，推测是发生了更新还是插入，这是行不通的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;要获得插入或者更新的ID，可以在SQL执行完后，利用唯一索引再把id查出来：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;@Insert&lt;/span&gt;(&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot; INSERT INTO t(v) VALUES(#{v}) ON DUPLICATE KEY UPDATE v=#{v}&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;@SelectKey&lt;/span&gt;(statement = &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;SELECT id FROM t WHERE v=#{v}&quot;&lt;/span&gt;, keyProperty = &lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;id&quot;&lt;/span&gt;, before = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;false&lt;/span&gt;, resultType = Long.class)&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;insert&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;(Entity obj)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;3. AUTO_INCREMENT 字段的GAP&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;根据&lt;a href=&quot;https://www.evernote.com/OutboundRedirect.action?dest=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.5%2Fen%2Finnodb-auto-increment-handling.html&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;的描述，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT ON DUPLICATE KEY UPDATE&lt;/code&gt; 属于 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;Mixed-mode inserts&lt;/strong&gt;，只分析SQL无法知道需要几个自增id，在 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;innodb_autoinc_lock_mode&lt;/code&gt; 为 1（默认值）或 2 时，这类 insert 不走 AUTO_INC 表级锁，而是用一个轻量级的 mutex，一次性分配最坏情况下所需要的自增id，至于用不用的完就不管了。上锁的只是分配id的过程，不会锁整个sql语句，这样一来提高了并发度，但代价是和后续insert分配的自增id之间可能存在空洞。具体到&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;INSERT ON DUPLICATE KEY UPDATE&lt;/code&gt;，即使最终执行了 update，自增ID也是会增长的，不过这一般不是问题。&lt;/p&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>GIT常用操作</title>
      <link>http://novoland.github.io/%E5%B7%A5%E4%BD%9C/2015/05/05/GIT%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html</link>
      <pubDate>05 May 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E5%B7%A5%E4%BD%9C/2015/05/05/GIT常用操作</guid>
      <description>&lt;div style=&quot;line-height: 1.5; color: #2c3f51;&quot;&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;&lt;div&gt;

&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;/p&gt;
&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;GIT常用操作&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;本地&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;初始化和设置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;工作流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;查看文件状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;忽略文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;工作区&amp;lt;==&amp;gt;暂存区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;暂存区==&amp;gt;版本库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;本地版本库&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;branch 和 HEAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;分支的增删查改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;分支合并&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;3. 冲突解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;4. 优缺点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;相对路径^和~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;撤销提交&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. revert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;随意移动commit&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. cherry-pick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. rebase -i&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;远程&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;push&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;常见GIT工作流&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;集中式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Forking 工作流&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr style=&quot;-moz-box-sizing: content-box; box-sizing: content-box; height: 0; margin-top: 21px; margin-bottom: 21px; border: 0; border-top: 1px solid rgba(102,128,153,0.1); margin: 2em 0;&quot;/&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;本地&lt;/h2&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;初始化和设置&lt;/h3&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git init &lt;span style=&quot;color: #75715e;&quot;&gt;# 创建新仓库&lt;/span&gt;

$ git config --global user.email &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;c@d.com&quot;&lt;/span&gt; &lt;span style=&quot;color: #75715e;&quot;&gt;# 设置全局email&lt;/span&gt;
$ git config --global user.name &lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;Anderson&quot;&lt;/span&gt; &lt;span style=&quot;color: #75715e;&quot;&gt;# 设置全局用户名&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;要为某个repo设置单独的email和用户名，把上述命令中的 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;--global&lt;/code&gt;去掉。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;.git&lt;/code&gt;文件夹保存本地仓库git相关的所有信息，如果要恢复成一个普通文件夹，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rm -rf .git&lt;/code&gt;删除之即可。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;工作流&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;本地仓库由3个区域组成，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;工作区&lt;/code&gt;持有你的源码等实际文件，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;像个工作区和版本库之间的buffer，临时存储你的改动，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;本地版本库&lt;/code&gt;记录着你每一次的提交，并维护若干分支。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428911979022.png&quot; name=&quot;84783623-df91-4ee3-bf30-3fe6ebc701de&quot; src=&quot;/assets/img/8140cecb95c65f2c709de3c504598f45.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;查看文件状态&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;所有文件都处在两个状态之一：&lt;strong style=&quot;font-weight: bold;&quot;&gt;untracked&lt;/strong&gt; 和 &lt;strong style=&quot;font-weight: bold;&quot;&gt;tracked&lt;/strong&gt;。&lt;strong style=&quot;font-weight: bold;&quot;&gt;untracked&lt;/strong&gt; 的文件未被纳入git的版本控制，&lt;strong style=&quot;font-weight: bold;&quot;&gt;tracked&lt;/strong&gt;状态又可被细分为以下三个状态：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;unmodified&lt;/strong&gt;：与版本库中的最新文件一致&lt;/li&gt;
&lt;li&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;modified&lt;/strong&gt;：顾名思义&lt;/li&gt;
&lt;li&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;staged&lt;/strong&gt;：修改过，并已加入&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;，坐等提交&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428915917524.png&quot; name=&quot;19ed4a42-72fa-429b-9a4e-c8f03bcd91a1&quot; src=&quot;/assets/img/770f99d22becaf3e57b3c253789581b2.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;查看文件状态：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git status&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;忽略文件&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;根目录下的&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;.gitignore&lt;/code&gt;文件描述了哪些文件需要被git忽略：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# 此为注释 – 将被 Git 忽略&lt;/span&gt;
*.a &lt;span style=&quot;color: #75715e;&quot;&gt;# 忽略所有 .a 结尾的文件&lt;/span&gt;
!lib.a &lt;span style=&quot;color: #75715e;&quot;&gt;# 但 lib.a 除外&lt;/span&gt;
/TODO &lt;span style=&quot;color: #75715e;&quot;&gt;# 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO &lt;/span&gt;
build/ &lt;span style=&quot;color: #75715e;&quot;&gt;# 忽略 build/ 目录下的所有文件&lt;/span&gt;
doc/*.txt &lt;span style=&quot;color: #75715e;&quot;&gt;# 会忽略 doc/notes.txt 但不包括 doc/server/arch.tx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;工作区&amp;lt;==&amp;gt;暂存区&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;将&lt;strong style=&quot;font-weight: bold;&quot;&gt;untracked&lt;/strong&gt;或&lt;strong style=&quot;font-weight: bold;&quot;&gt;modified&lt;/strong&gt;文件加入&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;（这个过程称为 stage）：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git add &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果改了&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;内的文件，需要再次&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;$ git add&lt;/code&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;$ git add .&lt;/code&gt; ：&lt;em&gt;偷懒，慎用&lt;/em&gt;。递归把当前目录下所有&lt;strong style=&quot;font-weight: bold;&quot;&gt;untracked&lt;/strong&gt;或&lt;strong style=&quot;font-weight: bold;&quot;&gt;modified&lt;/strong&gt;文件加入&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;unstage某个文件（文件内容不会变）：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;撤销对某个文件的修改，文件恢复到&lt;strong style=&quot;font-weight: bold;&quot;&gt;unmodified&lt;/strong&gt;状态，与版本库一致：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout &amp;lt;file&amp;gt;
$ git checkout .&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;删除、移动、重命名文件：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git rm &amp;lt;file&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#工作区的文件被删除，删除操作会被记录到暂存区&lt;/span&gt;
$ git mv &amp;lt;file_from&amp;gt; &amp;lt;file_to&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#移动、重命名&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;暂存区==&amp;gt;版本库&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;从&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;提交到&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;本地版本库&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git commit -m &lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;description&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;stage动作和commit动作二合一，自动将&lt;strong style=&quot;font-weight: bold;&quot;&gt;tracked&lt;/strong&gt;文件的更新/删除提交到&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;(忽略&lt;strong style=&quot;font-weight: bold;&quot;&gt;untracked&lt;/strong&gt;文件)，然后commit，慎用：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git commit &lt;span&gt;-a&lt;/span&gt; -m &lt;span style=&quot;color: #e6db74;&quot;&gt;&#39;added new benchmarks&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;修改最后一次提交：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git commit --amend&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;该命令有两个作用：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;提交当前&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;暂存区&lt;/code&gt;，并合并到上一次commit。常用于提交后发现漏了几个文件，又不想再提交一次的情况；&lt;/li&gt;
&lt;li&gt;可以修改上一次commit的描述。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;本地版本库&lt;/h3&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;branch 和 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;简单地说，版本库是一个个commit连接起来的一张图，&lt;strong style=&quot;font-weight: bold;&quot;&gt;branch是指向某个commit的&lt;em&gt;指针&lt;/em&gt;&lt;/strong&gt;，从初始commit到该branch指向的commit的路径，形成了该分支的历史。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt; 是一个非常重要的概念，理解了&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;很多其他命令就很直观了。&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;本质上也是一个指针，它有两种状态：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;通常情况下，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;是一个branch的 &lt;strong style=&quot;font-weight: bold;&quot;&gt;引用/镜像&lt;/strong&gt;，此时&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;和该branch绑定(&lt;strong style=&quot;font-weight: bold;&quot;&gt;attach&lt;/strong&gt;)在一起，一起指向某个commit，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;和该branch指针的移动会互相同步（除了用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;checkout&lt;/code&gt;显式移动&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;）；&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;attach &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt; 到某一分支的命令：&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;也可以不attach到branch，而是指向某个commit，这种状态称为 &lt;em&gt;detached HEAD&lt;/em&gt;。注意，即使&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;与branch本质上指向同一commit，如果没有显式用1中命令attach &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;到分支则也是 detached HEAD 状态。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;同样地，用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;checkout&lt;/code&gt; 命令将&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;指向某个特定的 commit：&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout &amp;lt;commit id&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;所指向commit的版本，是当前工作区内文件的基准。除此之外，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;一个重要的作用是：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 0;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt; 为很多git命令提供&lt;strong style=&quot;font-weight: bold;&quot;&gt;基准位置&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;比如：&lt;/p&gt;
&lt;table style=&quot;border-collapse: collapse; border-spacing: 0; margin-bottom: 20px;&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; line-height: 1.5; border-top: 0; border: 1px solid #ddd;&quot;&gt;命令&lt;/th&gt;
&lt;th align=&quot;left&quot; style=&quot;font-weight: bold; vertical-align: bottom; padding: .5em; line-height: 1.5; border-top: 0; border: 1px solid #ddd;&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git commit&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;将新的commit链接在&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;后并更新&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;（链表的插入），如果&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;attach到了某个branch，该branch也会被更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git branch &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;创建一个新的branch，值与&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;一致，与之指向同一个commit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git merge &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;将指定branch多出来的commit合并为一个并提交到&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;，后续逻辑与&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git commit&lt;/code&gt;一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;…&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;padding: .5em; line-height: 1.5; vertical-align: top; border-top: 1px solid #ddd; border: 1px solid #ddd;&quot;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;举例说明，假如初始状态如下图(master* 表示&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;attach到了master分支)： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428930288886.png&quot; name=&quot;f2284a84-3ce1-4248-9f60-8ced1f2bd9ed&quot; src=&quot;/assets/img/6b6c720cd632b625bd57cec7df10beac.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;用以下命令将&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;指向C0：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout C0&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428930234331.png&quot; name=&quot;10fd009b-4bb2-44bd-b0be-d0373259e337&quot; src=&quot;/assets/img/3d610609444fd854bfec6d0924b8a09e.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;在该状态下做一次commit（C2），C2链接在&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;后并移动&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428931457954.png&quot; name=&quot;46ccb824-24eb-4757-8c5d-876d01038d0d&quot; src=&quot;/assets/img/f219100df20b41415e727f2964ac72f6.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果此时执行&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git checkout master&lt;/code&gt;将&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;attach到master，我们会丢失C2的引用，因此在C2处建一个 dev 分支（其实就算丢失了也没关系，神奇的&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;reflog&lt;/code&gt;命令可以找到C2的id）：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch dev &lt;span style=&quot;color: #75715e;&quot;&gt;# 以 HEAD 为基准建立 dev 分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;结果如下，dev与&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;同时指向C2： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428931720329.png&quot; name=&quot;f7319ad9-d665-4d00-9f76-2f5bece10075&quot; src=&quot;/assets/img/747d3e4f78e7b4a9ea01ca46d3a73f00.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;注意，这时依然是 detached HEAD 状态，再commit一次的话可以看到 dev 分支不受影响： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428931934972.png&quot; name=&quot;748bdaca-89f6-4fb9-b1c5-0ab1789c852d&quot; src=&quot;/assets/img/edfadbba4b8606277066aabc0e9dbf8c.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果要在dev分支上提交，必须先将&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;attach到dev：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout dev&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428932457041.png&quot; name=&quot;3d9cc20b-9656-46d8-98ca-79b80c1382d8&quot; src=&quot;/assets/img/8c54cde6fd477a6b808b9a0ddecd1bb8.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;然后再commit： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428932491021.png&quot; name=&quot;18ecd23c-f793-434c-8e1e-359db004b314&quot; src=&quot;/assets/img/a256f5d9eb06637c41cb5509480ca9ea.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;现在将dev合并到master，根据之前描述的，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;merge&lt;/code&gt;的操作对象是&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;，因此先将&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;attach到master再做merge：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout master
$ git merge dev&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428933640277.png&quot; name=&quot;8e2b7956-33c3-4b66-bd5c-a18f586ab451&quot; src=&quot;/assets/img/582c2d47b7e80e39bfc500d5524000a3.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果只是单纯地让&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;指向C1而不attach到master上，结果会是这样：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout C1&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428933812055.png&quot; name=&quot;768c0019-a8ca-4a72-9c96-f4e189b29653&quot; src=&quot;/assets/img/9e4515e312e3af0b48e328984954a427.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git merge dev&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428933851514.png&quot; name=&quot;fb84380f-f3ae-41c9-8e25-e48ae3ac92fd&quot; src=&quot;/assets/img/9766006255eab425a1f9cf2697703a33.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;即操作的是&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;，master 分支不受影响。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;由上述例子可知，在针对某个分支操作之前，通常先要将&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;attach到该branch上，因此&lt;strong style=&quot;font-weight: bold;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;绑定的分支也被称为当前分支&lt;/strong&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;的位置可以通过 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;.git/HEAD&lt;/code&gt; 文件查看：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ cat .git/HEAD
e96c12854b77fe6f3dea81d593ddd2824eeaf9d6 &lt;span style=&quot;color: #75715e;&quot;&gt;#指向某个commit&lt;/span&gt;
$ git checkout develop
$ cat .git/HEAD
ref: refs/heads/develop &lt;span style=&quot;color: #75715e;&quot;&gt;#指向develop分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;分支的增删查改&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;分支的CRUD均由&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git branch&lt;/code&gt;命令完成。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;查询所有本地分支：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch
master
*develop    &lt;span style=&quot;color: #75715e;&quot;&gt;# 星号表示HEAD所在位置&lt;/span&gt;
bugfix&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;以&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;为基准，新建一个分支：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;删除一个分支：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch &lt;span&gt;-d&lt;/span&gt; &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;修改一个分支，“修改”实际上指的是&lt;strong style=&quot;font-weight: bold;&quot;&gt;移动branch指针&lt;/strong&gt;，理论上可以将一个branch指向任意commit：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch &lt;span&gt;-f&lt;/span&gt; &amp;lt;branch&amp;gt; &amp;lt;目标commit&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;重命名分支：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch -m &amp;lt;old_name&amp;gt; &amp;lt;new_name&amp;gt;
$ git branch -m &amp;lt;new_name&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#重命名当前分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;分支合并&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;假设有两个branch：bugfix和master，初始状态如下： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428935943072.png&quot; name=&quot;86f7de75-c7f2-45f0-8c1e-c9ea651764f3&quot; src=&quot;/assets/img/485928ca922508e5246b23d1b4595f99.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;现在要将 bugFix 合并到 master，我们有两种选择：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;1. &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;merge&lt;/code&gt;&lt;/h5&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;git merge bugFix&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;merge&lt;/code&gt;的动作如下：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;将 bugFix 分支独有的commit（这里只有C2）合并为1个（C4），commit 到当前分支（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;绑定的分支，即master）上；&lt;/li&gt;
&lt;li&gt;1中产生的新commit有两个parent，除了master的最末commit，bugFix指向的commit也是其parent。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;结果如下： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428936525569.png&quot; name=&quot;7c0ea7c1-5c7c-44b9-bf29-6b62c0e0f615&quot; src=&quot;/assets/img/18c6716eda9e5cc71f9a2d0fdeae0876.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;此时 bugFix 的 commit 被合并到了 master，master 含有了两个分支的提交信息（C3 + C4），但bugFix 却没有 master 分支的提交（即C3），如果想要让 bugFix 分支也含有全部提交，则可将master merge到bugFix：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout bugFix
$ git merge master&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;由于 bugFix 指向的 commit 实际上是 master 的祖先，因此这里的 merge 只会将 bugFix 分支 &lt;em&gt;fast-forward&lt;/em&gt; 到 master 分支，与其一同指向C4： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428937762260.png&quot; name=&quot;60a6b3cc-7450-4a4b-aeb2-73d11d582010&quot; src=&quot;/assets/img/ddc55bd463a9fd2f6ac4d59befe8bb66.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;2. &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase&lt;/code&gt;&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;对上面的场景我们也可以用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase&lt;/code&gt; 来进行分支合并：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;git rebase bugFix&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase&lt;/code&gt;的工作流程可以想象成：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;将当前分支(master) &lt;em&gt;挪到&lt;/em&gt; 目标分支bugFix 处；&lt;/li&gt;
&lt;li&gt;将原master的独有 commit (C3)复制一份并依次提交到新 master。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;结果如下： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1428938627755.png&quot; name=&quot;9d025939-2e99-42c3-b8f5-c098263d93e4&quot; src=&quot;/assets/img/3da2732f1de2c9ec9dee804a1470e400.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;就像把 master 分支上的 commit “append” 到了 bugFix 分支。注意 C3 依然存在，C3’只是 C3 的一份拷贝。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;接下来也可以用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase&lt;/code&gt;让bugFix与master保持同步，同样也是做一次 &lt;em&gt;fast-forward&lt;/em&gt;：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git checkout bugFix
$ git rebase master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;3. 冲突解决&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git merge&lt;/code&gt; 时如果出现文件冲突，合并将失败，冲突的详细信息会写入对应文件中，此时应修改文件，手动解决冲突，并用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; 表明冲突已解决。最后 commit 即完可，该提交的 message 默认为 “Merge branch xxx into yyy”：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ edit &amp;lt;file1&amp;gt;
$ edit &amp;lt;file2&amp;gt;
$ git add &amp;lt;file1&amp;gt;
$ git add &amp;lt;file2&amp;gt;

$ git commit&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git rebase&lt;/code&gt; 实质上一个多个commit依次回放的过程，如果某次“回放”出现了冲突，可以修改文件手动解决冲突，并用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; 表明冲突已解决。&lt;strong style=&quot;font-weight: bold;&quot;&gt;冲突修改完毕后不需要commit&lt;/strong&gt;，用下面命令继续 rebase：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git rebase --continue&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果中间遇到某个补丁不需要应用，可以用下面命令忽略：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;git rebase --skip&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果想回到rebase执行之前的状态，可以执行：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;git rebase --abort&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;4. 优缺点&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase&lt;/code&gt;的优点是分支树会很干净，不会出现分叉，也不会有一个多余的&lt;em&gt;Merge From XXX&lt;/em&gt; 的commit；缺点是commit的顺序会错乱。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;相对路径&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;^&lt;/code&gt;和&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;~&lt;/code&gt;&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;我们已经看到了两种修改commit指针的方式：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git checkout&lt;/code&gt;移动&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;指针&lt;/li&gt;
&lt;li&gt;用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git branch -f &amp;lt;branch&amp;gt; &amp;lt;目标commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果目标地址不是某个branch而是一个commit，我们必须找到其ID，这通常比较麻烦。我们可以用 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;^&lt;/code&gt; 和 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;~&lt;/code&gt; 相对某个指针进行定位：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;HEAD^ &lt;span style=&quot;color: #75715e;&quot;&gt;# HEAD之前的commit&lt;/span&gt;
HEAD^^ &lt;span style=&quot;color: #75715e;&quot;&gt;# HEAD回退两步的commit&lt;/span&gt;
master~&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #75715e;&quot;&gt;# master指针回退5步的commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;撤销提交&lt;/h4&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;1. &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;reset&lt;/code&gt;&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;reset 的作用是移动当前分支。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git reset HEAD^ &lt;span style=&quot;color: #75715e;&quot;&gt;#将当前分支往回退一步&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;它的效果和&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git branch&lt;/code&gt;移动分支是一样的：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git branch &lt;span&gt;-f&lt;/span&gt; master HEAD^ &lt;span style=&quot;color: #75715e;&quot;&gt;# master是当前分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;注意，文件的内容会被保留，你会发现多了很多未暂存的文件修改，利用这一点我们可以用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git reset&lt;/code&gt;整理commit历史，将多个commit合并为1个。如果想让所有文件彻底回到目标commit的状态，可以再次&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;$ git checkout .&lt;/code&gt;丢弃所有文件修改；或者给&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;reset&lt;/code&gt;加上&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;--hard&lt;/code&gt;参数，这样你的本地修改都会被抹杀，大招慎用。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;2. &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;revert&lt;/code&gt;&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;revert 为指定的（多个）提交生成逆操作，并依次形成新的commit：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git revert HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;效果： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1429632759910.png&quot; name=&quot;7816a4e9-c1f0-4b39-8cc6-86c859ac294f&quot; src=&quot;/assets/img/1668c449782266c97fe5be683d1de91c.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;  ==&amp;gt; &lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1429632817596.png&quot; name=&quot;377cde64-6313-4b26-b3da-62c18935a52b&quot; src=&quot;/assets/img/4024a57ffefd45ffb1e049bd36dd8f51.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt; &lt;br/&gt;
C2被撤销了。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;比&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;reset&lt;/code&gt;好在可以把撤销动作push到远程分支，共享给其他开发者。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;随意移动commit&lt;/h4&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;1. &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;cherry-pick&lt;/code&gt;&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;这命令名字很长但其实很简单，就是把指定的几个commit拷贝一份，append到HEAD后面，比如：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;$ git cherry-pick C2 C4&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430032079563.png&quot; name=&quot;4dda4a03-65f9-4029-9d50-2598a6d46c0a&quot; src=&quot;/assets/img/27e065839cde79c86a95eca5532fe04e.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt; ==&amp;gt; &lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430032097845.png&quot; name=&quot;f9f0d8d3-6a5f-4222-a158-b4cffd38767b&quot; src=&quot;/assets/img/203e9f331c55a7f03b791bee2ff9cd07.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;2. &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase -i&lt;/code&gt;&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;该命令提供了一个交互式的界面（说是界面其实用VI打开个文本文件）让你整理最近的若干次提交，你可以在这里对 commit 进行删除、合并、重排序，是整理commit历史的利器。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;比如你现在有3次提交，分别是&lt;em&gt;first/second/third&lt;/em&gt;，&lt;em&gt;third&lt;/em&gt;是最后一次提交。输入以下命令：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;git rebase -i HEAD~&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD~3&lt;/code&gt;表明修改对象是从&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD~3&lt;/code&gt;开始（不包括自己）到&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HAED&lt;/code&gt;的3个commit。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;然后出来一个文本文件让你编辑，怎么编辑有注释告诉你：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;pick &lt;span style=&quot;color: #ae81ff;&quot;&gt;65&lt;/span&gt;bc434 first
pick &lt;span style=&quot;color: #ae81ff;&quot;&gt;86253&lt;/span&gt;cb second
pick b2756fa third

&lt;span style=&quot;color: #75715e;&quot;&gt;# Rebase ab14c02..b2756fa onto ab14c02 (3 command(s))&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;#&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# Commands:&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# p, pick = use commit&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# r, reword = use commit, but edit the commit message&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# e, edit = use commit, but stop for amending&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# s, squash = use commit, but meld into previous commit&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# x, exec = run command (the rest of the line) using shell&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;#&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# These lines can be re-ordered; they are executed from top to bottom.&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;#&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;#&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# However, if you remove everything, the rebase will be aborted.&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;#&lt;/span&gt;
&lt;span style=&quot;color: #75715e;&quot;&gt;# Note that empty commits are commented out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;假如我们想把second和third合并为一个commit &lt;em&gt;new&lt;/em&gt; ，再把first丢在new的后面，应该这么搞：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;pick &lt;span style=&quot;color: #ae81ff;&quot;&gt;86253&lt;/span&gt;cb second &lt;span style=&quot;color: #75715e;&quot;&gt;#选择second&lt;/span&gt;
s b2756fa third &lt;span style=&quot;color: #75715e;&quot;&gt;#s：合并到上一个commit&lt;/span&gt;
pick &lt;span style=&quot;color: #ae81ff;&quot;&gt;65&lt;/span&gt;bc434 first &lt;span style=&quot;color: #75715e;&quot;&gt;#选择first&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;整个过程其实是 &lt;strong style=&quot;font-weight: bold;&quot;&gt;先将分支回退到指定位置（这里是&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD~3&lt;/code&gt;）然后依次执行上面的命令&lt;/strong&gt;：第一二行把second和third合并为一个提交，并让你编辑这个新提交的commit message： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430037853286.png&quot; name=&quot;4d76c9a2-a508-420a-babd-15c63cefd54f&quot; src=&quot;/assets/img/c4e5eb5760023e46167c1ef179d9bbe4.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;第三行提交first，同样也能编辑commit信息，截图就不放了。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;远程&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;远程分支是远程版本库中分支在本地的镜像，反应了远程库中分支的状态，是&lt;strong style=&quot;font-weight: bold;&quot;&gt;本地库与远程库交互的桥梁&lt;/strong&gt;。它们和本地分支没什么不同，只不过在某种意义上远程分支是“只读”的：你通常不会手动去操作远程分支，只会通过与服务器的“推送”和“拉取”动作来更新它们；而且也无法把&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HEAD&lt;/code&gt;指针和远程分支绑定（attach）在一起。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;clone&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git clone&lt;/code&gt;从远程主机中克隆一个版本库到本地，git 将做以下动作：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;远程库被命名为 origin；&lt;/li&gt;
&lt;li&gt;将远程库的所有数据（分支、提交历史）拷贝到本地，远程库中的每个分支以一个远程分支的形式存在（名称为&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;远程主机名/分支名&lt;/code&gt;，如&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;origin/master&lt;/code&gt;）；&lt;/li&gt;
&lt;li&gt;以远程库中的当前分支为基准，创建一个同名的本地分支，方便你进行后续工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;可以用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git branch -r&lt;/code&gt;查看远程分支，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;-a&lt;/code&gt;查看所有分支：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git branch &lt;span&gt;-a&lt;/span&gt;                                                
* master
  remotes/origin/HEAD -&amp;gt; origin/master
  remotes/origin/Task_Description_Display
  remotes/origin/Task_Description_Edit
  remotes/origin/master&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;以一个远程分支为基准创建本地分支的方式和之前一样：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git checkout origin/dev &lt;span style=&quot;color: #75715e;&quot;&gt;#移动HEAD指针到远程分支（进入detached HEAD模式）&lt;/span&gt;
&amp;gt; git branch dev &lt;span style=&quot;color: #75715e;&quot;&gt;#创建新分支dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git remote&lt;/code&gt; 用来管理远程库，不太常用，一般用默认的 origin 就够了：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git remote show &amp;lt;远程库&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#看地址&lt;/span&gt;
&amp;gt; git remote add &amp;lt;远程库&amp;gt; &amp;lt;地址&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#加&lt;/span&gt;
&amp;gt; git remote rm &amp;lt;远程库&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#删&lt;/span&gt;
&amp;gt; git rename &amp;lt;远程库&amp;gt; &amp;lt;新名字&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;#重命名&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;fetch&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果远程库有了更新，可以用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git fetch&lt;/code&gt;将更新拉取到本地，并将对应的远程分支（即 origin/master 等指针）移动到最新位置。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git fetch &amp;lt;远程库&amp;gt;   &lt;span style=&quot;color: #75715e;&quot;&gt;# 取所有分支的更新，如果远程库有新的分支，本地会创建对应的远程分支&lt;/span&gt;
&amp;gt; git fetch -p &amp;lt;远程库&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;# 同上，但会删除远程库中已不存在的远程分支，p==prunge&lt;/span&gt;
&amp;gt; git fetch &amp;lt;远程库&amp;gt; &amp;lt;分支名&amp;gt; &lt;span style=&quot;color: #75715e;&quot;&gt;# 取特定分支的更新&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git fetch&lt;/code&gt;只会更新远程分支，不会影响本地分支。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;pull&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git pull&lt;/code&gt; == &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git fetch&lt;/code&gt; + &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git merge&lt;/code&gt;：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;先从远程库拉取数据更新某个远程分支，再与指定本地分支进行merge。完整格式：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git pull &amp;lt;远程库&amp;gt; &amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt;
&amp;gt; git pull origin next:master &lt;span style=&quot;color: #75715e;&quot;&gt;# 更新origin/next，与master分支合并&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果省略&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;&amp;lt;本地分支&amp;gt;&lt;/code&gt;（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git pull origin &amp;lt;远程分支&amp;gt;&lt;/code&gt;），则与当前分支合并。如果当前分支与远程分支是 &lt;em&gt;tracking&lt;/em&gt;关系，则&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git pull&lt;/code&gt;即可，省略所有参数。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Tracking Branch&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;本地分支和远程分支间可以建立一种跟踪(Tracking)关系，这样的本地分支被称为 Tracking Branch。在跟踪分支上进行&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git pull&lt;/code&gt;或&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git push&lt;/code&gt;，Git会自动判断应向远程库中的哪个分支拉取/推送数据。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git clone&lt;/code&gt;时会自动为 &lt;em&gt;新建的本地分支&lt;/em&gt; 与 &lt;em&gt;对应远程分支&lt;/em&gt; 之间建立跟踪关系，这也是为什么克隆完成后&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git pull/push&lt;/code&gt;直接可用的原因。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;可以用下面的命令手动建立跟踪关系：&lt;/p&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git branch -u &amp;lt;远程分支&amp;gt; &amp;lt;本地分支&amp;gt;
或者
&amp;gt; git branch --set-upstream-to=&amp;lt;远程分支&amp;gt; &amp;lt;本地分支&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果合并远程分支时不想用默认的&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;merge&lt;/code&gt;而是&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;rebase&lt;/code&gt;，可以加上&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;--rebase&lt;/code&gt;参数：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git pull --rebase &amp;lt;远程库&amp;gt; &amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;push&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;将某个本地分支上的更新推送到远程库中的某个分支，完整格式：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git push &amp;lt;远程库&amp;gt; &amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果省略&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;&amp;lt;本地分支&amp;gt;&lt;/code&gt;（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git push origin &amp;lt;远程分支&amp;gt;&lt;/code&gt;），则把当前分支推送到远程库中的指定分支，无则新建。如果当前分支有且只有一个跟踪的远程分支，不带参数的&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git push&lt;/code&gt;即可。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git push&lt;/code&gt;还用来删除远程库中的分支，方法是&lt;strong style=&quot;font-weight: bold;&quot;&gt;将一个空白的分支推送到指定分支&lt;/strong&gt;：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git push origin :master &lt;span style=&quot;color: #75715e;&quot;&gt;#把远程库中的master分支删掉&lt;/span&gt;
等同于
&amp;gt; git push origin --delete master&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;这个需求很常见而命令又很奇怪，很容易忘记。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;不带参数的&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git push&lt;/code&gt;默认只推送当前分支，这成为“simple”方式；还有一种“matching”方式推送所有分支。2.0后默认是simple，可以用如下命令更改：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&amp;gt; git config --global push.default simple&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果远程库中分支的版本比本地更新，push时会报错，必须先在本地fetch，解决冲突并合并后再push。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;加&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;-f&lt;/code&gt; (force)选项可以用本地分支强制覆盖远程库中的分支。在整理提交历史时这个选项很有用，比如你刚做了两次提交并把它们push到了远程库中，现在你想把它们合并为一次，对本地分支可以用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git rebase -i&lt;/code&gt;或者&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git reset&lt;/code&gt;达到目的，但你无法把合并后的commit推送到远程库，这时可用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;-f&lt;/code&gt;把你整理后的本地分支强制推送过去。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;常见GIT工作流&lt;/h2&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;集中式&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430108058631.png&quot; name=&quot;75777236-40df-4260-8d9c-7976ef133673&quot; src=&quot;/assets/img/64d163dec7d1e7ae93d376ae01f14e8b.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;和传统SVN类似，只有一个远程库，开发者把库克隆到本地，进行修改再推送回去。库有更新了则先拉取下来进行合并，有冲突则解决冲突。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;简单实用，小型团队这么干就够了。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;Forking 工作流&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;在Forking工作流下，通常有一个由专人维护的官方仓库，开发者们没有官方仓库的push权限，而是先从官方仓库fork一份私有库，开发工作都在该库上进行，开发完毕后向官方仓库发起一个pull request，请求从自己的私有库中拉取更新合并到官方库。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Forking工作流的一个主要优势是不用开放官方仓库的push权限给第三方。开发者push到自己fork出来的私有库，只有项目维护者才能push到正式仓库。这样项目维护者可以接受任何开发者（包括不受信的第三方）的提交，而不用开放官方仓库的写权限给他。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Step1&lt;/strong&gt;：维护者建立官方仓库，假设只有一个分支master&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430117288018.png&quot; name=&quot;d42e02a5-a55e-4a06-b214-220f1a3a5426&quot; src=&quot;/assets/img/b97e977f8b827962608d5dc0a9b27822.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Step2&lt;/strong&gt;：开发者fork一个自己的私有库，一般会在fork时勾选同步，这样Git服务器（github或stash）会自动将官方仓库的更新同步过来：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430117646167.png&quot; name=&quot;223d316d-3a0a-4bd7-bd55-68a044f55067&quot; src=&quot;/assets/img/cd0e58344cab3019fdb42ab400eb167f.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Step3&lt;/strong&gt;：开发者clone自己fork的库，并在新分支上（如dev）进行开发工作，开发完毕将其push到私有库的dev分支，私有库的master分支用于同步官方仓库，不直接修改：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430117815702.png&quot; name=&quot;156dd713-ad9f-49c7-904f-5108d184cebb&quot; src=&quot;/assets/img/11326c2fab04c269e4a42c8c37aea781.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Step4&lt;/strong&gt;：开发者创建一个pull request，通知维护者将自己私有库中的分支合并到官方仓库中：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430118213821.png&quot; name=&quot;0f414936-91be-451c-848f-d2e901259c9e&quot; src=&quot;/assets/img/26266e4567b95a93e9586052fb342256.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Stash 中创建pr的表单如下，你需要指定要将自己库中的哪个分支推送到官方库中的哪个分支，本例中是dev推送到master： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430118017839.png&quot; name=&quot;5d3b23c7-fe10-430f-885e-31c3b0dacb44&quot; src=&quot;/assets/img/1ebf158e129d86a327266327a14ba7ec.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Step5&lt;/strong&gt;：官方仓库的维护者收到pr后决定是否接受。Stash提供了GUI界面，维护者可以直接在网站中查看pr的代码修改、与开发者进行讨论，最后执行合并。接受pr的效果相当用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;git pull&lt;/code&gt;命令拉取开发者仓库分支（dev）并merge到官方仓库分支（master），这也是 “pull request” 名称的由来。如果出现了冲突，维护者必须在本地从开发者仓库中fetch分支，合并到本地分支master，并解决冲突，最后将代码push到官方仓库：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430118926103.png&quot; name=&quot;2300a2a9-3c22-46d5-8cf6-e7fb0c40160f&quot; src=&quot;/assets/img/eee8dca00fb4737eb882b3baf3cfae7c.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; line-height: 1.45; font-size: .9em; word-wrap: break-word; background: #f6f6f6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# 拉取开发者仓库中的分支&lt;/span&gt;
&amp;gt; git fetch https://bitbucket.org/user/repo feature-branch
&lt;span style=&quot;color: #75715e;&quot;&gt;# 查看变更&lt;/span&gt;
&amp;gt; git checkout master
&lt;span style=&quot;color: #75715e;&quot;&gt;# 解决冲突并合并&lt;/span&gt;
&amp;gt; git merge FETCH_HEAD
&amp;gt; git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Step6&lt;/strong&gt;：官方仓库的master分支向前走了，开发者私有仓库中的master分支会自动同步，开发者将最新代码pull到本地：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1430119179264.png&quot; name=&quot;6a91b9cb-affd-4e66-9ae8-189c116db2c9&quot; src=&quot;/assets/img/ac6870ef0627b403e2501bf4129b9cd5.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;Tips&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;Mac下的图形化Git：gitx；&lt;/li&gt;
&lt;li&gt;Ubuntu下的图形化Git：gitg；&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/76861/&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Git工作流指南：Forking工作流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Pro Git》&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pcottle.github.io/learnGitBranching/&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Learn Git Branching&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>常用设计模式的总结</title>
      <link>http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93.html</link>
      <pubDate>02 Apr 2015</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/常用设计模式的总结</guid>
      <description>&lt;div style=&quot;color: #2c3f51; line-height: 1.6;&quot;&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;

&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;常用设计模式的总结&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;一. 创建型模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. Factory method 工厂方法&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. Abstract factory 抽象工厂&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;3. Singleton 单例&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;4. Builder&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;交互&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;二. 结构型模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. Adapter 适配器&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. Proxy 代理&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;与Decorator模式的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;3. Bridge 桥接模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;4. Decorator 装饰者&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;5. Composite 组合模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;6. Facade&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;三. 行为模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. Chain of Responsibility 责任链&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;扩展&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;应用&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;标准责任链&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;扩展（功能链）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. Command 命令&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;3. Memento 备忘录&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;4. Observer 观察者&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;扩展：EventBus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;5. State 状态模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;6. Strategy 策略模式&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;7. Template Method 模板方法&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none; line-height: 1.6;&quot;&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;四. 设计原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;一. 创建型模式&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;1. Factory method 工厂方法&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;一个类需要一个产品来完成某项工作，但它不能确定，也不关心具体拿到什么产品，因此它定义一个工厂方法，将具体产品的生产延迟到子类决定。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403160006818.png&quot; name=&quot;815b1ae9-fa42-45c7-8ce1-1e3cfa9697eb&quot; src=&quot;/assets/img/18beee5db7b6bd0a8be14199eaa9289e.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;父类可以选择为工厂方法提供一个默认的实现；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;工厂方法通常在模板方法（Template method）中被调用，上图中&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;AnOperation()&lt;/code&gt;就是一个模板方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;2. Abstract factory 抽象工厂&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;系统有一组相互关联的产品接口，及几套不同的实现。客户只依赖产品接口，并需要能灵活地在几套实现中切换。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;因此提供一个抽象工厂生产抽象的产品，每个产品在其中都对应一个工厂方法，产品族的每一套实现都提供一个具体工厂。客户通过抽象工厂获取产品，当需要切换到产品的其他实现时只需要更换工厂的实现类。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403146746942.png&quot; name=&quot;cc1f550b-d3ac-4847-91d6-df55775dcbe5&quot; src=&quot;/assets/img/035462ec043438b6758dcf27783ac846.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;应用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;根据底层数据源的不同，DAO的实现通常有几套，当切换数据源时，系统使用的DAO的实现也应当能快速切换。这是使用抽象工厂的一个典型场景。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;3. Singleton 单例&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;保证一个类只有一个对象&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;private&lt;/code&gt;构造器&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;private static&lt;/code&gt; 类变量 singleton&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;public static&lt;/code&gt; 类方法 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;getInstance()&lt;/code&gt; 返回singleton。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;实例化时机：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;eager&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;lazy&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;lazy init 多线程问题的解决办法：&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Double Check&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;static&lt;/span&gt; A singleton = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;null&lt;/span&gt;;

&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;static&lt;/span&gt; A &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;if&lt;/span&gt;(singleton == &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;null&lt;/span&gt;){
        sychronized(A.class){
            &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;if&lt;/span&gt;(singleton == &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;null&lt;/span&gt;) singleton = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;new&lt;/span&gt; A();
        }
    }
    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;return&lt;/span&gt; singleton;
}

&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;为什么要第二次的null判断？ &lt;br/&gt;
在第一次判null / 获取锁之间可能有其他线程实例化了。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;为什么要&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;volatile&lt;/code&gt;？ &lt;br/&gt;
在上面提到的情况下，如果没有&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;volatile&lt;/code&gt;保证的可见性，在第二次null判断时当前线程可能看不到别的线程创建的对象，从而通过并再创建一次。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;static 内部类&lt;/code&gt;利用 “类的加载/static块是线程安全的” 实现线程安全的lazy init：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #a6e22e; font-style: italic;&quot;&gt;A&lt;/span&gt;&lt;/span&gt;{
    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;line-height: 1.6;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #a6e22e; font-style: italic;&quot;&gt;Holder&lt;/span&gt;&lt;/span&gt;{
        &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;static&lt;/span&gt; A singleton = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;new&lt;/span&gt; A();
    }

    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;static&lt;/span&gt; A &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;return&lt;/span&gt; Holder.singleton;
    }

    &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;&lt;span style=&quot;line-height: 1.6; color: #66d9ef;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;line-height: 1.6; color: #a6e22e;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;line-height: 1.6; color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;4. Builder&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;你有一个产品，该产品由若干part装配而成，装配的逻辑是固定的，但各个part的构造是可切换选择的，Builder模式将 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;固定的装配逻辑&lt;/strong&gt; 与 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;易变的part构造逻辑&lt;/strong&gt; 分离开，可以方便地在不同的part实现逻辑之间切换。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403163234482.png&quot; name=&quot;f2f52c32-904f-4005-b469-6ceab218cb79&quot; src=&quot;/assets/img/c0a3a2c8ac96ae2b632840adff485541.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Director#construct()&lt;/code&gt; 负责固定的装配逻辑；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;一个&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Builder&lt;/code&gt;实例负责一个产品内部所有part的构造（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;buildPart()&lt;/code&gt;方法族），并向外部暴露方法，在part都装配完毕后获取该产品。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;交互&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403163378411.png&quot; name=&quot;401a0656-67ee-4ad6-8884-bba562877f1b&quot; src=&quot;/assets/img/48bc1c5fd3e8b0feb1c8376c2624881b.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr style=&quot;-moz-box-sizing: content-box; box-sizing: content-box; height: 0; margin-top: 21px; margin-bottom: 21px; border: 0; border-top: 1px solid rgba(102,128,153,0.1); margin: 2em 0; line-height: 1.6;&quot;/&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;二. 结构型模式&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;1. Adapter 适配器&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;在两个不兼容的接口之间加一个中间层，用组合的方式将一个现有对象匹配到需要的接口。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;Convert the interface of a class into another interface the client expects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403164872248.png&quot; name=&quot;b2280c71-73c2-44eb-b3eb-daeb3b69ed07&quot; src=&quot;/assets/img/c064c439075e2763de2e671525b1eda6.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;2. Proxy 代理&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;Provide a surrogate or place holder for another object to control access to it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;你有一个真正干活的对象RealSubject，但需要向client控制对他的访问，比如权限的控制 / Lazy load / 结果的缓存等等，因此在client和RealSubject之间增加一个中间层Proxy代替RealSubject，Proxy包裹RealSubject，将具体功能实现委托给它，并在RealSubject执行真正的功能前后插入自己的逻辑；此外，Proxy向client隐藏了RealSubject的存在。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403416618628.png&quot; name=&quot;4da066cf-ad1c-4575-b5b6-e673befd26f6&quot; src=&quot;/assets/img/f1d237241de80e592a429463c570401b.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;与&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Decorator&lt;/code&gt;模式的区别&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Proxy与Decorator有着相似的结构，&lt;em style=&quot;line-height: 1.6;&quot;&gt;* 他们都在client和真实对象之间增加一个与真实对象实现了相同接口的中间层，这个中间层保留了对真实对象的引用并向他们发送请求*&lt;/em&gt;。然而他们的设计目的是不同的：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Decorator侧重动态为实体增加功能，因此在该模式中：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;实体只实现了部分功能，Decorator实现了其他的增强功能；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;支持递归组合（增加多重功能）；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Decorator不知道自己装饰的是哪个具体对象，client必须自己手动将实体和Decorator关联起来。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Proxy的目的则是当访问一个特定实体不方便或不符合要求时，为这个实体提供一个替代者，因此：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;实体实现了关键功能，Proxy提供（或拒绝）对它的访问；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;不支持递归组合；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Proxy向client屏蔽RealSubject的存在，client只能拿到Proxy；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Proxy确定地知道自己的代理目标是RealSubject，因此它和RealSubject相关联而不是Subject接口；此外，它们的关系是静态的，无法在运行时改变Proxy代理的目标对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;3. Bridge 桥接模式&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;你有一个产品，它在两个维度上都是可变化的，如果用继承，则需要n*m个子类。Bridge模式将两个维度的继承体系独立出来，并在二者之间用组合进行装配，避免类的泛滥。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;进一步地考虑，一个产品的继承体系应该只有一个维度，如果出现了其他维度上的继承，要考虑该维度是否是行为/实现相关的。对于行为/实现方面的变化，应当先把行为独立地抽象出来，并与原产品&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;组合&lt;/strong&gt;（这就是&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;策略模式&lt;/code&gt;的含义），而不应该直接在原产品上通过继承表达该行为的变化。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;举个例子，假如系统内要发送消息，消息按迫切程度分为普通/加急/特急，消息的发送形式也可以多样，比如站内信/短信/email，每种消息都要求可以用任意方式发送：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403166907142.png&quot; name=&quot;ef3fdeb5-1eb1-46f4-90a8-63b4df7dd9af&quot; src=&quot;/assets/img/847c1c498fbe0949cea6d1e54529116c.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果简单地用继承，则需要3*3 = 9个类。但实际上，&lt;em style=&quot;line-height: 1.6;&quot;&gt;消息的发送&lt;/em&gt; 这个维度属于行为，&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;不要用继承来表达行为的变化，这样会污染原本的抽象层次&lt;/strong&gt;，应当用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;策略模式&lt;/code&gt;将 &lt;em style=&quot;line-height: 1.6;&quot;&gt;消息发送&lt;/em&gt; 这个行为分离。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;采用Bridge模式： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403168007802.png&quot; name=&quot;ec69d397-81eb-4e54-bf0f-caccd04c8b82&quot; src=&quot;/assets/img/26bd87f9aac60b903429a043f5267fe2.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403167837240.png&quot; name=&quot;19482432-6997-47bf-abf5-09d94692ad6d&quot; src=&quot;/assets/img/f575f921b45b33e766d4996850d57f51.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;产品的抽象 + 行为的分离（&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;策略模式&lt;/code&gt;）&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;总结&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Bridge模式在我看来是对&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;策略模式&lt;/code&gt;的扩展，它的核心有两点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;只在一个维度上用继承，出现了多个维度则考虑分离并用组合，避免类的泛滥和抽象维度的混杂；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;策略模式&lt;/code&gt;隔离行为的变化，不要让行为/实现的变化污染原本的继承体系。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;4. Decorator 装饰者&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;有一系列产品，你希望动态地为他们添加额外 / 可自由组合 的功能，并且不影响产品本身。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;Attach additional responsibilities to an object dynamically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403176265661.png&quot; name=&quot;608e2ade-e005-4f88-a483-30f3464db3db&quot; src=&quot;/assets/img/30afda5a1ce0b38a24ddf91ab1cc35fd.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Decorator 装饰器&lt;/code&gt;继承产品抽象接口，并在内部持有一个产品（可能是具体产品，也有可能被装饰过了）；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Decorator&lt;/code&gt;的具体实现，为其装饰的产品提供额外的功能，类似递归的调用；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;可以同时反复应用多个 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Decorator&lt;/code&gt; ，实现额外功能的动态组合。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;应用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;1. &lt;br/&gt;
java的IO流的设计是一个典型的装饰者模式： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403176954152.png&quot; name=&quot;5c5975fd-71df-48c5-9d30-1639cb018042&quot; src=&quot;/assets/img/0b3cd16d7a13a3595c5d2ce4bc8e7989.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ByteArrayInputStream | FileInputStream | ObjectInputStream | StringBufferInputStream&lt;/code&gt;是具体的输入流产品，根据数据来源区分； &lt;br/&gt;
&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;FilterInputStream&lt;/code&gt;是装饰器； &lt;br/&gt;
&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;BufferedInputStream | DataInputStream | LineNumberInputStream | PushbackInputStream&lt;/code&gt;是具体的装饰器，分别为其他输入流提供缓冲/类型读写/跟踪行号/退回已读数据的功能，这些装饰器是可以组合使用的：&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;pre style=&quot;word-break: break-word; font-family: &#39;Source Code Pro&#39;,monospace; white-space: pre-wrap; display: block; background-color: rgba(102,128,153,0.05); color: #333; word-wrap: break-word; font-size: .9em; background: #f6f6f6; line-height: 1.6; margin: 0 0 1.1em; padding: 2px; border: 0; border-radius: 5px; text-align: start;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: inherit; background-color: transparent; white-space: pre-wrap; border-radius: 0; color: #f8f8f2; display: block; background: #23241f; padding: 18px 28px;&quot;&gt;InputStream in = &lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;new&lt;/span&gt; DataInputStream(&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;new&lt;/span&gt; BufferedInputStream(&lt;span style=&quot;line-height: 1.6; color: #f92672;&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span style=&quot;line-height: 1.6; color: #e6db74;&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;))); &lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;2. &lt;br/&gt;
&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Decorator模式&lt;/code&gt;也可以用来实现&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;AOP&lt;/code&gt;的类似功能（虽然实际大部分都是用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;JDK动态代理 / 运行时修改字节码&lt;/code&gt;），&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Decorator&lt;/code&gt;的具体实现就是我们想要独立出来的切面，产品的具体实现则是我们想要保持独立的业务逻辑。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;5. Composite 组合模式&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;实现树形结构，并让用户可以用统一的接口对待叶子节点和非叶子节点。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403178780524.png&quot; name=&quot;798cd136-1a17-4043-bbbc-252aa7309666&quot; src=&quot;/assets/img/209632dd71560ad008afa322afcd4a8b.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;操作孩子的方法应该放在Component中吗？毕竟Leaf是不支持这些操作的。 &lt;br/&gt;
出于透明性考虑，应该放在Component中，Leaf对这些方法就提供一个空的实现。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Component除了保存孩子，也可以记录父亲；&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;应用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;UI / 人员组织管理这种典型的树形结构中用的比较广泛。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;6. Facade&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;一个系统对外提供服务，系统暴露的接口应该是简单而统一的，客户不应该直接和系统内复杂的子部件进行交互，而应只依赖于一个单一的高层接口，该组件为客户屏蔽了内部的复杂性，降低了客户和系统的耦合。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403180072180.png&quot; name=&quot;51a5345e-8878-45e3-be1d-f107fe8e299a&quot; src=&quot;/assets/img/614a5339a4bc9e877faba8860023bd7e.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;更像是一种设计思路，而非一个具体模式。&lt;/p&gt;
&lt;hr style=&quot;-moz-box-sizing: content-box; box-sizing: content-box; height: 0; margin-top: 21px; margin-bottom: 21px; border: 0; border-top: 1px solid rgba(102,128,153,0.1); margin: 2em 0; line-height: 1.6;&quot;/&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;三. 行为模式&lt;/h2&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;1. Chain of Responsibility 责任链&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;客户端发出一个请求，有一系列的处理器都有机会处理这个请求，但具体哪个是运行时决定的，客户端也不知道究竟谁会来处理。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;因此将所有处理器组成一个链条，将请求从链条中流过，每个处理器查看是否应该处理它，如果不是，则交给后面的处理器，否则处理并退出。&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;处理器在链中的位置决定其优先级。&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;将请求者和处理者解耦，可以动态切换/组合处理者。&lt;/p&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403243902492.png&quot; name=&quot;865e77db-ace2-4ec6-a785-efa647309a64&quot; src=&quot;/assets/img/a56fee528e339c6613e30648efbef87c.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;扩展&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;客户端发出一个请求，请求的处理分为很多步骤，这些步骤是不确定的/可以动态组合的，甚至需要支持在运行时改变步骤，或者在步骤间任意跳转。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;解决方案和责任链类似，将处理流程抽象为一个处理器链条，链条的组装交给外部决定。每个处理器对请求完成自己负责的业务逻辑，并看情况结束/传递给下一个处理器/跳转到任意处理器。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这和标准的责任链的结构基本一样，但他们的目的不一样。标准责任链目的是动态 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;找到请求的处理者&lt;/strong&gt; ；扩展（某些地方称为“功能链”？）则是为了获取 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;动态拼装和改变处理流程&lt;/strong&gt; 的能力。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;应用&lt;/h4&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;标准责任链&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;UI中的事件冒泡机制是责任链的一个典型应用。HTML中，点击一个DOM元素，产生的click事件将依次冒泡给它的父元素，每个父元素上都可以注册对click事件的监听器，监听器中除了对事件处理外，也可以结束事件的继续冒泡。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;扩展（功能链）&lt;/h5&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;Web应用中的各种filter/拦截器；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Netty中的pipeline&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;2. Command 命令&lt;/h3&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; margin-bottom: 0; line-height: 1.6;&quot;&gt;Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;你需要向一个对象提交请求，但对请求的处理是动态的，无法写死。比如一个菜单项，在不同的上下文中，点击它要做的事情显然是不一样的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;Command模式的思路是 &lt;em style=&quot;line-height: 1.6;&quot;&gt;抽象请求(及处理)&lt;/em&gt;：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403330120754.png&quot; name=&quot;54ec3d42-3a0e-40df-b379-796fcbadc5d6&quot; src=&quot;/assets/img/3b17f754f940a0f0fe4ba7ab42d3bf7b.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Client&lt;/code&gt; 装配 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Invoker&lt;/code&gt; 和 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Command&lt;/code&gt;，&lt;em style=&quot;line-height: 1.6;&quot;&gt;* 如果需要不同的处理，装配不同的Command即可 *&lt;/em&gt;;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Client&lt;/code&gt; 向 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Invoker&lt;/code&gt; 发出请求;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Invoker&lt;/code&gt; 将请求的处理委托给 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Command#execute()&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;很多时候Command不够智能，自己无法处理请求，需要将请求委托给另一个Receiver进行真正的处理，ConcreteCommand可以认为是Receiver的适配器：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403330618542.png&quot; name=&quot;12ffea50-afe4-4721-b820-028fa7e9ef9b&quot; src=&quot;/assets/img/218e4d5340a7128621b66317a0231de9.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;可以看到，Command模式的最大价值在于：隔离 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;请求的接收者&lt;/code&gt; 和 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;请求的处理逻辑&lt;/code&gt;； &lt;br/&gt;
此外，将请求及其处理逻辑抽象为Command后可以做很多有意思的事情：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;1. 可撤销的操作&lt;/strong&gt; &lt;br/&gt;
在Command接口中增加一个接口 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;undo()&lt;/code&gt; 实现单个命令的撤销动作，并用一个&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;stack&lt;/code&gt;保存所有Command；当用户触发撤销时依次从stack pop出最近的Command，执行其&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;undo()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;2. 宏命令&lt;/strong&gt; &lt;br/&gt;
宏命令实质是个树形结构，对Command应用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Composite 组合模式&lt;/code&gt;即可实现：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403331500067.png&quot; name=&quot;e7847b4f-41bf-4119-a951-4d624dba8667&quot; src=&quot;/assets/img/dc457220d36c915d5e2029e38450f985.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;3. 排队&lt;/strong&gt; &lt;br/&gt;
&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;4. 日志记录和恢复&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;3. Memento 备忘录&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;有些情况下你需要记录一个对象（称为&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Originator&lt;/code&gt;）在某个时刻的状态（snapshot），以便后续恢复，我们可以用一个类&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Memento&lt;/code&gt;表示snapshot，它包含了Originator的部分或全部状态：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403337566655.png&quot; name=&quot;be9e3e1d-4218-44e6-8a2e-3d97bc30a012&quot; src=&quot;/assets/img/9c6a8340acd50dba1917c3cf4a125982.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;Originator 负责创建Memento，以及恢复到某个Memento；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Memento 即Originator的snapshot；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Caretaker 充当协调者，它负责向Originator请求当前Memento / 保存Memento / 在后续某个时刻让Originator恢复到某个Memento。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;但这里有一个问题，为了隐藏Originator的实现细节，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Memento&lt;/code&gt;必须向外部隐藏内部数据，即不开放&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;state&lt;/code&gt; 的 getter/setter 给外部，但这样一来，Originator也无法创建&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Memento&lt;/code&gt;了。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;为了解决这个问题，在Memento模式的一般实现中，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Memento&lt;/code&gt; 类被分为两个部分：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403338095772.png&quot; name=&quot;5674e674-3a18-4f78-99e7-6a7f92fba97a&quot; src=&quot;/assets/img/3d7987515415ba78f3ea820f2f1bc8e0.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;标记接口 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Memento&lt;/code&gt;，空的，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Caretaker&lt;/code&gt;只能得到这个接口；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;Memento的真正实现&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;MementoImpl&lt;/code&gt;，作为&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Originator&lt;/code&gt;的 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;私有内部类&lt;/strong&gt; ，这样既允许Originator访问Memento的内部状态，又满足了Memento向外部（主要是Caretaker）隐藏内部细节的要求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果对 &lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Memento&lt;/code&gt; 的封装性没有严格的要求，第一种实现显然更简单。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;4. Observer 观察者&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;定义一个一对多关系，在Subject状态发生改变时，所有Observer获得通知。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;解耦 事件发生者 &amp;amp; 事件接收者，使得双方的改动互不影响，关联关系也可动态改变。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403418566851.png&quot; name=&quot;7c703bde-46c8-40ab-b902-80c8c0896ee8&quot; src=&quot;/assets/img/dce2e441e24a27dc6a4c0ca8d82d0e41.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;数据传递的两种方式：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;推：由 Subject 主动向 Observer 推送信息，而不管信息对后者而言是否需要/是否足够。&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;拉：Subject 把自己传递给 Observer，由 Observer 从 Subject 拉取自己需要的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;扩展： Observer 注册时可以指定自己感兴趣的事件。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;扩展：EventBus&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;传统的Observer模式中，事件发生者和接收者依然存在耦合，发生者需要管理接收者的集合，我们可以进一步地，在Subject和Observer间增加一个中间层负责转发事件，将它们彻底地解耦；进一步，这个事件转发者可以是通用的，支持任意发布者和接受者，通常称之为&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;EventBus&lt;/code&gt;，是一种广泛应用的架构。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;5. State 状态模式&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;模拟状态机，描述一个对象（Context）的状态变迁，将特性状态下的行为分割开来，避免在Context中用大量的if维护所有状态的变迁，而且容易扩展新的状态。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403425126082.png&quot; name=&quot;4c50c831-800a-498b-b553-aa9bdbae3443&quot; src=&quot;/assets/img/06380860aa7c8cbaf8c29f204a4b5829.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Context&lt;/code&gt;中记录它自己当前的状态；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Context&lt;/code&gt;接收一个输入动作，并将该输入委托给当前所处&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;State&lt;/code&gt;处理；&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;State&lt;/code&gt;处理输入，根据需要让&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Context&lt;/code&gt;跃迁到另一状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;如果&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;State&lt;/code&gt;不保存状态则可以是单例的，Java中，可以用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;enum&lt;/code&gt;类型实现&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;State&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;6. Strategy 策略模式&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;你有一个对象负责完成某件事情，但在不同时刻其使用的算法是不同的，Strategy模式将可变的算法独立并封装，避免大量if条件判断，并方便替换和扩展。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Strategy&lt;/code&gt; 封装了 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;相同行为的不同实现&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403426300530.png&quot; name=&quot;cf367d7d-c611-4531-9aad-9ca5a3b18527&quot; src=&quot;/assets/img/268d5cd27f08e90d9ac5080546e92817.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Strategy&lt;/code&gt;的实现通常依赖&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Context&lt;/code&gt;的数据，后者在调用前者的方法时需要将自己传递过去。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;实际应用中，经常会发现不同的策略其算法骨架类似，只有某些具体步骤不同，此时可以对&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Strategy&lt;/code&gt;应用&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Template Method&lt;/code&gt;模式。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;7. Template Method 模板方法&lt;/h3&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;作用&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;将一个算法的通用骨架抽象到父类以避免代码重复，而将一些可变的步骤延迟到子类，子类不用关心算法结构，只需关注自己需要实现的特定步骤。&lt;/p&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0 .6em 0; text-align: start; line-height: 1.6;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1403426928543.png&quot; name=&quot;772bc14e-aeb5-4b1a-a5cc-949ce6f912c0&quot; src=&quot;/assets/img/eb5eef525d7d05d550d5925a2189fa33.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;这个没什么好说的。&lt;/p&gt;
&lt;hr style=&quot;-moz-box-sizing: content-box; box-sizing: content-box; height: 0; margin-top: 21px; margin-bottom: 21px; border: 0; border-top: 1px solid rgba(102,128,153,0.1); margin: 2em 0; line-height: 1.6;&quot;/&gt;
&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0 .6em 0; text-align: start;&quot;&gt;四. 设计原则&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;单一职责&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;开放-关闭原则&lt;/strong&gt; &lt;br/&gt;
一个类应当对扩展开放，对修改关闭。即当有新的需求时，不是修改已有的类，而是对已有的类进行扩展。 &lt;br/&gt;
实现开闭原则的关键在于 &lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;分离不变和变化的部分，并对变化的部分进行合理的高层抽象，并让不变的部分依赖该高层抽象&lt;/strong&gt;，这样就能在不同的实现间切换，或者扩展新的实现。很多设计模式都体现了这一点，比如&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;策略模式&lt;/code&gt;将算法抽象出来，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;模板方法&lt;/code&gt;将不变的算法骨架与易变的需要自定义的步骤隔离，&lt;code style=&quot;font-family: &#39;Source Code Pro&#39;,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;装饰者模式&lt;/code&gt;将不变的核心功能对象和易变的增强功能隔离等等。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;里氏替换原则&lt;/strong&gt; &lt;br/&gt;
子类必须能替换掉父类，这个原则通常由语言保证。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;依赖倒置&lt;/strong&gt; &lt;br/&gt;
高层不直接依赖底层，而是高层定义自己需要底层提供什么样的接口，底层负责实现，这样就可以随意切换底层的具体实现而不用影响高层，但底层反而要依赖高层公布的接口，所以称为“依赖倒置”。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;接口分离原则 (interface segregation principle)&lt;/strong&gt; &lt;br/&gt;
不应出现庞大的接口，迫使客户在使用时必须从一大堆它不需要的方法中寻找目的方法。这样的接口应该按照不同客户的需求被分离成若干小接口。&lt;/p&gt;&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;&lt;p style=&quot;margin: 0 0 1.1em; line-height: 1.6;&quot;&gt;&lt;strong style=&quot;font-weight: bold; line-height: 1.6;&quot;&gt;最少知识原则（least knowledge principle）&lt;/strong&gt; &lt;br/&gt;
类应当只与自己的朋友交互。该原则的思想是，将类对外部的了解尽量保持在一定范围内，尽量减少类之间的交互，从而降低各个组件间的耦合。 &lt;br/&gt;
“朋友”的定义：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em; line-height: 1.6;&quot;&gt;&lt;li style=&quot;line-height: 1.6;&quot;&gt;当前对象的属性&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;当前对象所创建的对象&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;方法参数传递进来的参数&lt;/li&gt;
&lt;li style=&quot;line-height: 1.6;&quot;&gt;方法内创建的对象&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 1.6;&quot;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ThreadLocal 分析</title>
      <link>http://novoland.github.io/%E5%B9%B6%E5%8F%91/2014/09/11/ThreadLocal%20%E5%88%86%E6%9E%90.html</link>
      <pubDate>11 Sep 2014</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E5%B9%B6%E5%8F%91/2014/09/11/ThreadLocal 分析</guid>
      <description>&lt;div style=&quot;line-height: 1.5; color: #2c3f51;&quot;&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;&lt;div&gt;

&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;/p&gt;
&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;ThreadLocal 分析&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;典型的使用方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;典型使用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;内存管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;从功能上来说，它类似一个全局的Map，key是线程。不同线程get时拿到的都是专属于自己的那个对象，互相隔离，完全不存在并发问题。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;典型的使用方式&lt;/h2&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;// 摘自 j.u.c.ThreadLocalRandom&lt;/span&gt;
&lt;span style=&quot;color: #f92672;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;final&lt;/span&gt; ThreadLocal&amp;lt;ThreadLocalRandom&amp;gt; localRandom =  &lt;span style=&quot;color: #75715e;&quot;&gt;// ThreadLocal对象都是static的，全局共享&lt;/span&gt;
    &lt;span style=&quot;color: #f92672;&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;ThreadLocalRandom&amp;gt;() {      &lt;span style=&quot;color: #75715e;&quot;&gt;// 初始值&lt;/span&gt;
        &lt;span style=&quot;color: #f92672;&quot;&gt;protected&lt;/span&gt; ThreadLocalRandom initialValue() {
            &lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;new&lt;/span&gt; ThreadLocalRandom();
        }
};

localRandom.&lt;span style=&quot;color: #f92672;&quot;&gt;get&lt;/span&gt;();      &lt;span style=&quot;color: #75715e;&quot;&gt;// 拿当前线程对应的对象&lt;/span&gt;
localRandom.put(...);   &lt;span style=&quot;color: #75715e;&quot;&gt;// put&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;典型使用场景&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;用空间换并发度；&lt;/li&gt;
&lt;li&gt;在线程范围内传参，如 hibernate 的 session；&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;实现&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;一个非常自然想法是用一个线程安全的 &lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Map&amp;lt;Thread,Object&amp;gt;&lt;/code&gt; 实现：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;class ThreadLocal { 
  &lt;span style=&quot;color: #f92672;&quot;&gt;private&lt;/span&gt; Map values = Collections.synchronizedMap(&lt;span style=&quot;color: #f92672;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;HashMap&lt;/span&gt;());

  &lt;span style=&quot;color: #f92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;Object&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;get&lt;/span&gt;() {
    Thread curThread = Thread.currentThread();
    &lt;span style=&quot;color: #f92672;&quot;&gt;Object&lt;/span&gt; o = values.&lt;span style=&quot;color: #e6db74;&quot;&gt;get&lt;/span&gt;(curThread);
    &lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt; (o == &lt;span style=&quot;color: #f92672;&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !values.containsKey(curThread)) {
      o = initialValue();
      values.put(curThread, o);
    }
    &lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt; o;
  }

  &lt;span style=&quot;color: #f92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #f92672;&quot;&gt;Object&lt;/span&gt; newValue) {
    values.put(Thread.currentThread(), newValue);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;但这是非常naive的：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;本意是避免并发，用一个全局Map显然违背了这一初衷；&lt;/li&gt;
&lt;li&gt;用&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Thread&lt;/code&gt;当key，除非手动调用&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;remove&lt;/code&gt;，否则即使线程退出了 1)该&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;Thread&lt;/code&gt;对象无法回收； 2)该线程在所有&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;中对应的value也无法回收。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;JDK 的实现刚好是反过来的： &lt;br/&gt;
&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1404916039768.png&quot; name=&quot;7adc9cbf-24e8-4274-887c-45862c1925c5&quot; src=&quot;/assets/img/3603e633a6095f8aaf63273ed133a2e8.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;每个Thread对象内都存在一个&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal.ThreadLocalMap&lt;/code&gt;对象，保存着该线程所有用到的&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;及其value。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocalMap&lt;/code&gt;是定义在&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;类内部的私有类，它是采用“开放定址法”解决冲突的hashmap。key是&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;对象。当调用某个&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;对象的&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;get&lt;/code&gt;或&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;put&lt;/code&gt;方法时，首先会从当前线程中取出ThreadLocalMap，然后查找对应的value：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;public&lt;/span&gt; T get() {
    &lt;span style=&quot;color: #f92672;&quot;&gt;Thread&lt;/span&gt; t &lt;span style=&quot;color: #e6db74;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;Thread&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;.&lt;/span&gt;currentThread();
    ThreadLocalMap &lt;span style=&quot;color: #e6db74;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;=&lt;/span&gt; getMap(t);     &lt;span style=&quot;color: #75715e;&quot;&gt;//拿到当前线程的ThreadLocalMap&lt;/span&gt;
    &lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #e6db74;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;null&lt;/span&gt;) {
        ThreadLocalMap&lt;span style=&quot;color: #e6db74;&quot;&gt;.&lt;/span&gt;Entry e &lt;span style=&quot;color: #e6db74;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;.&lt;/span&gt;getEntry(this);    &lt;span style=&quot;color: #75715e;&quot;&gt;// 以该ThreadLocal对象为key取value&lt;/span&gt;
        &lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt; (e &lt;span style=&quot;color: #e6db74;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;null&lt;/span&gt;)
            &lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt; (T)e&lt;span style=&quot;color: #e6db74;&quot;&gt;.&lt;/span&gt;value;
    }
    &lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt; setInitialValue();
}
ThreadLocalMap getMap(&lt;span style=&quot;color: #f92672;&quot;&gt;Thread&lt;/span&gt; t) {
    &lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt; t&lt;span style=&quot;color: #e6db74;&quot;&gt;.&lt;/span&gt;threadLocals;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;现在来看看它的哈希策略。所有&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;对象共享一个&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;AtomicInteger&lt;/code&gt;对象&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;nextHashCode&lt;/code&gt;用于计算hashcode，一个新对象产生时它的hashcode就确定了，算法是从0开始，以&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;HASH_INCREMENT = 0x61c88647&lt;/code&gt;为间隔递增，这是&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;唯一需要同步的地方。根据hashcode定位桶的算法是将其与数组长度-1进行与操作：&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;key.threadLocalHashCode &amp;amp; (table.length - 1)&lt;/code&gt;。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;0x61c88647&lt;/code&gt;这个魔数是怎么确定的呢？&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocalMap&lt;/code&gt;的初始长度为16，每次扩容都增长为原来的2倍，即它的长度始终是2的n次方，上述算法中使用&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;0x61c88647&lt;/code&gt;可以让hash的结果在2的n次方内尽可能均匀分布，减少冲突的概率。具体原因我也不知道，不过这是一个好的参考。&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;内存管理&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocalMap.Entry&lt;/code&gt;继承自&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;WeakReference&lt;/code&gt;，是 key（ThreadLocal 对象） 和 value 的容器：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;static &lt;span&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Entry&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;&lt;span style=&quot;color: #66d9ef;&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #a6e22e; font-style: italic;&quot;&gt;WeakReference&amp;lt;ThreadLocal&amp;gt;&lt;/span&gt; {&lt;/span&gt;
    &lt;span style=&quot;color: #75715e;&quot;&gt;/** The value associated with this ThreadLocal. */&lt;/span&gt;
    &lt;span&gt;Object&lt;/span&gt; value;

    &lt;span&gt;Entry&lt;/span&gt;(&lt;span&gt;ThreadLocal&lt;/span&gt; k, &lt;span&gt;Object&lt;/span&gt; v) {
        &lt;span style=&quot;color: #f92672;&quot;&gt;super&lt;/span&gt;(k);
        value = v;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;一旦某个&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;对象没有强引用了，它在所有线程内部的&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocalMap&lt;/code&gt;中的key都将被GC掉（此时value还未回收），在map后续的&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;get/set&lt;/code&gt;中会探测到key被回收的entry，将其 value 设置为 null 以帮助GC，因此 value 在 key 被 GC 后可能还会存活一段时间，但最终也会被回收。这个过程和&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;java.util.WeakHashMap&lt;/code&gt;的实现几乎是一样的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;因此&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt;本身是没有内存泄露问题的，通常由它引发的内存泄露问题都是由于线程只 put 而忘了 remove ，从上面分析可知，即使线程退出了，只要 &lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; white-space: normal; border-radius: 4px;&quot;&gt;ThreadLocal&lt;/code&gt; 还有强引用，该线程曾经 put 过的东西是不会被回收掉的。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>MapReduce Algorithms</title>
      <link>http://novoland.github.io/%E5%B7%A5%E4%BD%9C/2014/09/04/MapReduce%20Algorithms.html</link>
      <pubDate>04 Sep 2014</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E5%B7%A5%E4%BD%9C/2014/09/04/MapReduce Algorithms</guid>
      <description>&lt;div style=&quot;line-height: 1.5; color: #2c3f51;&quot;&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;&lt;div&gt;

&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;/p&gt;
&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;MapReduce Algorithms&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;1. MapReduce 工作原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2. 常见算法的 MapReduce 实现&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.1 count / distinct&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;distinct&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.2 group by / aggregation&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.3 inverted index&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.4 sort&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.5 median / 第 k 大数&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.6 top k&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.6.1 出现次数 top k 的元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;2.7 join&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;解决&lt;/a&gt;&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Replicated Join (Map Join, Hash Join)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;Repartition Join (Reduce Join, Sort-Merge Join)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;join 优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;3. 参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;1. MapReduce 工作原理&lt;/h2&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;一图胜千言：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;img alt=&quot;Alt text&quot; class=&quot;en-media&quot; longdesc=&quot;./1409802041299.png&quot; name=&quot;1a6b1e79-166a-4285-84f2-0128d87d409f&quot; src=&quot;/assets/img/3b6dc283d85bb557aa3ad7b9974069fd.png&quot; style=&quot;border: 0; vertical-align: middle; max-width: 100%;&quot; title=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;Mapper&lt;/strong&gt;:&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;Mapper 主要做些信息抽取、过滤等工作&lt;/li&gt;
&lt;li&gt;Mapper 数量由输入的 split 数决定，hadoop 会尽量选择靠近数据的节点运行 mapper 任务，因此可以认为 mapper 是 data-local 的&lt;/li&gt;
&lt;li&gt;生成的 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;2. 常见算法的 MapReduce 实现&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.1 count / distinct&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题描述&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;其实就是 Hadoop wordcount 的例子：一堆文档，每个文档内一堆单词，统计每个单词出现次数。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;解决&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Mapper：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;raw data    --&amp;gt;    对每个碰到的单词，输出 &amp;lt;word,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Shuffle 后可以保证同一个单词的所有键值对被一个 Reducer 处理&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Reducer：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;&amp;lt;word,[&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1.&lt;/span&gt;..]&amp;gt;   --(sum)--&amp;gt;    &amp;lt;word,&lt;span style=&quot;color: #ae81ff;&quot;&gt;5&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;优化&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;用 combiner 合并 mapper 的输出，减少传输数据量： &lt;br/&gt;
Mapper：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;raw data 
&lt;span style=&quot;color: #ae81ff;&quot;&gt;1.&lt;/span&gt; --(mapper)--&amp;gt;    &amp;lt;word1,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&amp;gt; &amp;lt;word1,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&amp;gt; &amp;lt;word2,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&amp;gt; 
&lt;span style=&quot;color: #ae81ff;&quot;&gt;2.&lt;/span&gt; --(combine)--&amp;gt;   &amp;lt;word1,&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;&amp;gt; &amp;lt;word2,&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;distinct&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;distinct 就是集合去重，解决思路和 count 问题一样，不过不需要记录单词出现次数，键值对的 value 用 null 就可以了：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;Mapper:
raw data    --&amp;gt;    &amp;lt;word,&lt;span style=&quot;color: #f92672;&quot;&gt;null&lt;/span&gt;&amp;gt;

Reducer:
&amp;lt;word,[&lt;span style=&quot;color: #f92672;&quot;&gt;null&lt;/span&gt;,&lt;span style=&quot;color: #f92672;&quot;&gt;null&lt;/span&gt;...]&amp;gt;   --&amp;gt;    &amp;lt;word,&lt;span style=&quot;color: #f92672;&quot;&gt;null&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.2 group by / aggregation&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;实现类似数据库的 group by 及聚合函数的功能&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;实现&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Mapreduce 的 shuffle 过程其实已经帮我们做了 group by 的工作，Reducer 拿到的输入就是 group by 后的结果，对其 value 应用聚合函数即可。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.3 inverted index&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;一堆文档，构造对应的倒排索引。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;解决&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;思路和 wordcount 是一样的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Mapper：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;对一个文档中的每个单词，输出 &amp;lt;word,fileName&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;优化：可以用 Combiner 合并 Mapper 的输出。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Reducer:&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;Rducuer 的输入是 &amp;lt;word,[file1,file2...]&amp;gt;，直接输出就好了&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.4 sort&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;一堆文件，每个文件都有若干行，一行是一个数字，数字的范围是确定的，要求对其排序。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;解决&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;利用 Reducer 拿到的输入是有序的这一特性，Mapper 和 Recuder 如果都用 identity function，那么每个 Reducer 的输出都是有序的，但 Reducer 之间无法保证有序。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果用归并排序的思路， 那么最后还需要一个只有一个 Reducer 的 Mapreduce 任务对所有数据做一次 merge，这显然是无法接受的。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;真正可行的算法是 &lt;strong style=&quot;font-weight: bold;&quot;&gt;桶排序&lt;/strong&gt;。回顾桶排序的过程，它首先将数据分布范围划分为若干个桶，接着遍历一遍元素并分配到对应的桶中，然后对每个桶做一次排序，因为桶之间是有序的，所以不需要 merge。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;在 Mapreduce 中，Partitioner 负责划分桶。举个例子，假设数据分布在 1 到 1w 之间，我们可以将其划分为 10 个桶，同时用 10 个 Reducer 处理每个桶内的数据，这样 Reducer 间就是有序的。为了实现这个效果，可以用一个自定义的Partitioner，将 Mapper 输出划分到上述 10 个桶内即可。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.5 median / 第 k 大数&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;一堆数字，找中位数或第 k 大数。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;工作中遇见过一个类似的问题，场景是：&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 0;&quot;&gt;有一堆 Nginx 登陆日志，每条 log 都有一个时间点，要求找到一个时间点，使得该时间点之前的日志数占总日志数的 30%。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;解决&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;在小数据量场景下，反复利用快速排序的分割可以在 O(n) 范围内找到第 K 大数。我们可以将这个思路扩展到分布式环境下：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;用一个 MapReduce 任务统计所有日志的时间范围和日志总数；&lt;/li&gt;
&lt;li&gt;随机选一个时间点，用一个新的任务统计该时间点之前和之后的日志数；&lt;/li&gt;
&lt;li&gt;如果该时间点不满足要求，则根据 2 的结果找一个新的时间点，重复步骤2。&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;通常这类统计需求不要求非常精确，得到一个差不多的值就可以了。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.6 top k&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;求一堆数前 k 大的数。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;解决&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;其实这个问题和上面的第 k 大数是一样的，可以用上面的思路解决，这里介绍一种 k 比较小时效率更高的算法。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果数据量很小，求 top k 可以用一个小根堆维护 top k，堆顶为这最大的 k 个数中的最小元素，把所有数据过一遍，最后堆内就是所求值了。这个算法可以很容易地扩展到分布式的环境中：先求出每个 split 的 top k，合并这些元素再求一次 top k 即得结果。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Mapper：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;维护一个小根堆，任务结束后对堆内每个元素输出一个键值对 &amp;lt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&lt;/span&gt;,num1&amp;gt;, &amp;lt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&lt;/span&gt;,num2&amp;gt; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Reducer（数量为 1）：&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;得到的输入为 &amp;lt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&lt;/span&gt;,[每个 split 的 top k]&amp;gt;，对 value 求一次 top k 就可以了。&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;该算法的优势在于只要一次 Mapreduce 任务即可，但缺点是只适用于 k 比较小的情况，如果 k 很大：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;如果 k 大于每个 split 内包含的记录数，算法失效；&lt;/li&gt;
&lt;li&gt;Reducer 可能没有足够的内存容纳输入&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.6.1 出现次数 top k 的元素&lt;/h3&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;比上面的 top k 问题多了一个步骤，&lt;strong style=&quot;font-weight: bold;&quot;&gt;要求出每个元素的出现次数&lt;/strong&gt;。如果数据量比较小，可以用下面方法：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;bitmap（如果不是数字的话则用 hashmap）+ 堆 / 快排的分割&lt;/strong&gt; &lt;br/&gt;
bitmap / hashmap 用来统计元素的出现次数，堆用来保存当前 top k，只需一次遍历即可。    用快排的分割的话，要先统计出次数再分割，不只一次遍历。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;不要求精确的话，可以用 &lt;strong style=&quot;font-weight: bold;&quot;&gt;计数版本的 BloomFilter + 堆&lt;/strong&gt; &lt;br/&gt;
BloomFilter 只保存了元素的次数，没有保存元素，因此只能边统计边记录 top k，一次遍历。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果是大数据量就需要&lt;strong style=&quot;font-weight: bold;&quot;&gt;先用一个 hadoop 任务来分割&lt;/strong&gt;，保证同一个元素的记录被分配到同一个 reducer，这样可以求出每个元素的出现次数；以这个任务的输出为输入，用上面提到的 top k 算法求出每个 split 的 top k；最后用一个 reducer 进行 merge，求出 top k 的 top k。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h3 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 1.7em; margin: 1.2em 0; text-align: start;&quot;&gt;2.7 join&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;问题&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;join！&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;解决&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;通常有以下两种算法：&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;Replicated Join (Map Join, Hash Join)&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果 join 的一方数据量较小，可以载入内存，则可以用 Hadoop 的 Distributed Cache 将其分发到每个 Mapper 节点，在 Mapper 端进行 join。较小数据集在 Mapper 端通常被构造成一个 HashMap 以加速查找，因此 Mapper Join 实质上是一种 Hash join。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h5 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1em; margin: 1.2em 0; text-align: start;&quot;&gt;Repartition Join (Reduce Join, Sort-Merge Join)&lt;/h5&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果两个数据集都很大，可在 Reducer 侧做 join：&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Mapper 同时处理两个集合的数据，为遇到的每个记录生成一个键值对，key 是 join 的列值，value 除了该记录还需要一个 tag 表明它来自哪个集合:&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;raw data    --&amp;gt;    &amp;lt;key,(record,fromA)&amp;gt;, &amp;lt;key,(record,fromB)&amp;gt; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Shuffle 后 Reducer 得到一个 key 对应的所有记录，无论是来自集合 A 还是 B。接下来 Reducer 用循环，根据 join 的类型对这些记录做连接即可。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;该算法的关键在于 shuffle 阶段的排序，因此本质上是一种 Sort-Merge join。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Reducer 侧 join 是一种通用的 join 算法，但它有以下缺点：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;Mapper 侧根本不过滤数据，所有数据，即使是那些无法 join 的记录，都会被传输到 Reducer 侧，再由 Reducer 过滤，这样性能很差；&lt;/li&gt;
&lt;li&gt;Reducer 侧可能没有足够的内存装下一个 key 对应的所有记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h4 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 10.5px; margin-bottom: 10.5px; font-size: 1.25em; margin: 1.2em 0; text-align: start;&quot;&gt;join 优化&lt;/h4&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;考虑这样一个场景：有两个数据集，Customer 和 Order，要求对他们进行 join，但仅限于地区在上海的顾客。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;有几种可能的优化方式：&lt;/p&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;预先过滤一个集合，使用 Replicated Join&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;利用“地区为上海”这个约束过滤 Customer，如果过滤后的数据集足够小，则可以采用 Replicated Join；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;用半连接(semi join)优化 Reduce Join：先过滤集合 A ，再用得到的结果在 Mapper 处过滤集合 B，最后在 Reducer 处 Join&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果过滤后的数据集依然很大，那么只能采用低效率的 Reduce join。优化 Reduce join 的主要策略是 &lt;strong style=&quot;font-weight: bold;&quot;&gt;尽量将数据过滤动作放在 Mapper 进行&lt;/strong&gt;（这也是一个通用准则），在上述例子中， Mapper 在处理某个 Order 时，如果知道其对应的 Customer 不在 Customer 集合中，或者不在上海地区，那么就可以跳过它而不用传输到 Reducer 侧。为了达到这一点，我们可以先对 Customer 过滤（就像1一样），将上海的顾客的&lt;em&gt;* ID *&lt;/em&gt;选出来，这样得到的文件比1得到的文件更小（因为它只有一个 ID），很有可能可以被装入内存。用 Distributed Cache 将该 ID 文件分发到所有 Mapper 节点，Mapper 在处理 Customer 或 Order 的记录时就可以根据这个集合过滤所有非上海的顾客了。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;如果过滤得到的 ID 文件依然很大，这时判重利器 &lt;a href=&quot;http://novoland.github.io/%E7%AE%97%E6%B3%95/2014/07/28/BloomFilter.html&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;BloomFilter&lt;/strong&gt;&lt;/a&gt; 就派上用场了。我们可以建立一个 BloomFilter 表示过滤后的顾客 ID 集合，它的尺寸要远小于原始集合。BloomFilter 存在的误判率也不是问题，它只会把不存在的元素误判为存在，Reducer 处也会进行过滤，可以把误判的元素剔除掉。&lt;/p&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;基于 Mapreduce 为超大集合建立 BloomFilter 的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;每个 Mapper 对自己负责的 split 建立 BloomFilter，用一个 Reducer 接收它们并两两相“或”，即得到整体集合的 BloomFilter。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;这利用了 BloomFilter 的性质：&lt;/p&gt;
&lt;pre style=&quot;font-family: Source Code Pro,monospace; font-size: .9em; white-space: pre-wrap; display: block; padding: 2px; margin: 0 0 1.1em; line-height: 1.45; word-break: break-word; word-wrap: break-word; color: #333; background-color: rgba(102,128,153,0.05); border: 0; border-radius: 5px; text-align: start; background: #f6f6f6;&quot; xml:space=&quot;preserve&quot;&gt;&lt;code style=&quot;font-family: Source Code Pro,monospace; font-size: inherit; padding: 18px 28px; color: #f8f8f2; background-color: transparent; white-space: pre-wrap; border-radius: 0; display: block; background: #23241f;&quot;&gt;filter1 | filter2 == 并集
filter1 &amp;amp; filter2 == 交集&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2 style=&quot;font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; font-size: 2.15em; margin: 1.2em 0; text-align: start;&quot;&gt;3. 参考&lt;/h2&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://highlyscalable.wordpress.com/2012/02/01/mapreduce-patterns/&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Mapreduce patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cloudera.com/wp-content/uploads/2010/01/5-MapReduceAlgorithms.pdf&quot; style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot; target=&quot;_blank&quot;&gt;Mapreduce algorithms.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Hadoop in action》&lt;/li&gt;
&lt;li&gt;《Hadoop 权威指南》&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>高性能网络通讯笔记</title>
      <link>http://novoland.github.io/%E7%BD%91%E7%BB%9C/2014/09/03/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E7%AC%94%E8%AE%B0.html</link>
      <pubDate>03 Sep 2014</pubDate>
      <author>克鲁斯卡尔</author>
      <guid>http://novoland.github.io/%E7%BD%91%E7%BB%9C/2014/09/03/高性能网络通讯笔记</guid>
      <description>&lt;div style=&quot;line-height: 1.5; color: #2c3f51;&quot;&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;&lt;div&gt;

&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;/p&gt;
&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 15px; list-style-type: none;&quot;&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;高性能网络通讯笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;传统rpc的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;数据协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;IO模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;background: transparent; color: #1980e6; text-decoration: none;&quot;&gt;线程模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;前几天看了下阿里巴巴 RPC 框架 Dubbo 作者的内部分享，这里记下笔记。&lt;/p&gt;&lt;/div&gt;&lt;div&gt;
&lt;h1 style=&quot;font-size: 2.6em; margin: 1.2em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; text-align: start;&quot;&gt;传统rpc的问题&lt;/h1&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;java序列化，性能低&lt;/li&gt;
&lt;li&gt;每连接每线程，BIO有性能问题&lt;/li&gt;
&lt;li&gt;jdk代理性能低&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;
&lt;h1 style=&quot;font-size: 2.6em; margin: 1.2em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; text-align: start;&quot;&gt;数据协议&lt;/h1&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;应用层协议&lt;/li&gt;
&lt;li&gt;header字段： &lt;br/&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;magic high&lt;/li&gt;
&lt;li&gt;magic low  — 端口复用，多协议支持；兼容其他协议。&lt;/li&gt;
&lt;li&gt;序列化方式&lt;/li&gt;
&lt;li&gt;event&lt;/li&gt;
&lt;li&gt;是否双向&lt;/li&gt;
&lt;li&gt;请求还是响应&lt;/li&gt;
&lt;li&gt;status&lt;/li&gt;
&lt;li&gt;id  – futureMap保存所有发送的请求，响应中携带请求id，实现一一对应 &lt;br/&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;使用int id替换long，实现id轮转+超时（？？）&lt;/li&gt;
&lt;li&gt;剩下来的位数可以用来扩展，存储服务器状态&lt;/li&gt;
&lt;li&gt;使用future机制把客户端的同步调用转成异步的&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;data length&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;序列化协议 &lt;br/&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;web应用cpu负载低，网络负载高。数据包大小比压缩时间更重要。网络传输的时间远远大于cpu压缩时间，过于追求低压缩时间没有意义。&lt;/li&gt;
&lt;li&gt;发送前压缩数据包。&lt;/li&gt;
&lt;li&gt;另一个考虑的因素：工具使用的方便程度、适用场景是否广泛。protobuf用起来麻烦、hession/fastjson有些情况会序列化失败、java serialize最安全和普适。如果这里不是一个明显的瓶颈，可以直接使用java内置的序列化方式。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;序列化策略 &lt;br/&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;chunk stream&lt;/li&gt;
&lt;li&gt;一个连接上承载多个请求发送。如果一个请求过大发送时间过长会造成其他请求不能及时得到处理，容易出现超时。— 将这些大的数据包拆分成多片，穿插发送。server端自己拼装。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;
&lt;h1 style=&quot;font-size: 2.6em; margin: 1.2em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; text-align: start;&quot;&gt;IO模型&lt;/h1&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;Unix的5种IO模型&lt;/li&gt;
&lt;li&gt;IO的两个阶段&lt;/li&gt;
&lt;li&gt;是否阻塞 – 异步、同步&lt;/li&gt;
&lt;li&gt;Blocking IO、Non-Blocking IO（non-blocking的意义：当需要睡眠当前线程时才能完成请求时，不睡眠，只做部分操作并返回；从内核拷贝数据到用户空间时依然会阻塞）、IO multiplexing（事件驱动，一般和non blocking IO搭配使用）、Signal-Driven IO&lt;/li&gt;
&lt;li&gt;Asynchronous IO&lt;/li&gt;
&lt;li&gt;NIO的优势 &lt;br/&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;避免多线程&lt;/li&gt;
&lt;li&gt;基于block的传输比基于流的传输更高效&lt;/li&gt;
&lt;li&gt;基于mmap的zero-copy&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TCP的调优 &lt;br/&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;正确设置socket缓冲区，接收/发送缓冲区大小应该至少 = Bandwidth Delay Product = 带宽 * 往返时间，这样才能把两端之间的通信链路填满数据，充分利用带宽。 &lt;br/&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;减少进程读写缓冲区的系统调用；&lt;/li&gt;
&lt;li&gt;充分利用带宽&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;关闭nagle算法，RPC 调用不允许延迟&lt;/li&gt;
&lt;li&gt;在应用层做心跳检测，关闭tcp的keep-alive（这是全局设置）&lt;/li&gt;
&lt;li&gt;网卡中断负载均衡&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;div&gt;
&lt;h1 style=&quot;font-size: 2.6em; margin: 1.2em 0; font-family: inherit; font-weight: bold; line-height: 1.1; color: inherit; margin-top: 21px; margin-bottom: 10.5px; text-align: start;&quot;&gt;线程模型&lt;/h1&gt;
&lt;ol style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;MainReactor * 1负责接受连接 + SubReactor * N (thread pool，“IO线程”, 负责监听读写事件. 一个线程负责多个连接)的方式，和Netty一样。&lt;/li&gt;
&lt;li&gt;业务处理时也引入线程池&lt;/li&gt;
&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;codec（数据收集/拼装）/serialize（序列化/反序列化）在什么线程里做&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;Netty中codec直接在IO线程中做，dubbo也一样；&lt;/li&gt;
&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;Serialize/deserialize 分开了，在业务线程（池）中做； &lt;br/&gt;
原因原文没说，猜测：&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;serialize是比较耗时的，所有耗时的操作都应该放在业务线程中做，IO线程必须快速返回以便处理下一个连接，否则容易造成后续连接过很久才能得到处理，易超时；&lt;/li&gt;
&lt;li&gt;codec为什么不放在业务线程中做？一是职责分离，业务线程的输入是有意义的完整数据包；二是在数据包不完整时，业务线程基本上会快速退出继续阻塞，这会导致业务线程池的不稳定和频繁的线程切换。&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote style=&quot;padding: 15px 20px; margin: 0 0 1.1em; border-left: 5px solid rgba(102,128,153,0.075); border-left-width: 10px; background-color: rgba(102,128,153,0.05); border-top-right-radius: 5px; border-bottom-right-radius: 5px;&quot;&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;任务的合理切分。&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 1.1em;&quot;&gt;在NIO的客户端，接受数据的事件将会写得很轻量级，但是接受到数据然后分析数据还原成业务对象，之后则会通过线程池的方式来分别处理。就好比监听连接到来，和实际的去建立连接分成了两个阶段的任务，让事件型的任务单纯，快速执行，让与业务相关的部分通过多线程并行的方式提高处理效率。总的来说就是把任务划分成为 &lt;strong style=&quot;font-weight: bold;&quot;&gt;系统性的任务&lt;/strong&gt; 和 &lt;strong style=&quot;font-weight: bold;&quot;&gt;业务性的任务&lt;/strong&gt;，前者消耗时间少，设计尽量简单高效，采用单线程处理即可，后者通常情况下在处理流程和资源上不冲突的情况可以通过多线程并行提高效率。（后者IO bound时多线程可以提高效率[依赖]，CPU bound时均分计算资源，要慢一起慢，不会出现一个任务耗时导致别的任务超时，此时处理总时间由于线程切换的开销反而会更大）&lt;/p&gt;
&lt;p style=&quot;margin: 0 0 1.1em; font-size: 1em; font-weight: 300; line-height: 1.45; margin-bottom: 0;&quot;&gt;— 放翁 《优化杂谈》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;多线程的目的: 1. 阻塞时可以利用CPU;  2. 均分计算资源, 让多个任务都得以推进&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;业务线程池应该多大？ &lt;br/&gt;
这一部分来自淘宝的《前台系统性能调优》&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;根据业务的CPU/IO类型不同，充分利用IO阻塞与CPU执行的overlapping（交错执行）&lt;/li&gt;
&lt;li&gt;公式 — 从CPU角度：&lt;/li&gt;&lt;/ul&gt;
&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;/p&gt;&lt;div&gt;&lt;div style=&quot;text-align: center; margin: 1em 0; position: relative; display: block; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%;&quot;&gt;&lt;span style=&quot;font-size: 100%; display: inline-block; font-style: normal; font-weight: normal; line-height: normal; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0; vertical-align: middle;&quot;&gt;&lt;span&gt;&lt;img class=&quot;en-media&quot; height=&quot;50.75&quot; longdesc=&quot;__SVG__e04b5f594afd4ffe12b30403d1037c41&quot; name=&quot;71b3d9e9-98d2-4c60-8f6a-296830144545&quot; src=&quot;/assets/img/76e68b55e19152a546c83e36f045453f&quot; style=&quot;margin-top: 0; margin-bottom: 0; border: 0; vertical-align: middle; max-width: 100%;&quot; width=&quot;324.625&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0 0 1.1em;&quot;&gt;&lt;/p&gt;
&lt;ul style=&quot;margin-top: 0; margin-bottom: 1.1em;&quot;&gt;&lt;li&gt;鸵鸟策略：设置多线程数，保证能充分利用CPU；线程切换开销假装没有，的确是瓶颈时再调。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>